# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MessageEventDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, recipient=None, type=None, received_at=None, details=None):
        """
        MessageEventDetails - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'recipient': 'str',
            'type': 'str',
            'received_at': 'datetime',
            'details': 'MessageEventDetailsDetails'
        }

        self.attribute_map = {
            'recipient': 'Recipient',
            'type': 'Type',
            'received_at': 'ReceivedAt',
            'details': 'Details'
        }

        self._recipient = None
        self._type = None
        self._received_at = None
        self._details = None

        # TODO: let required properties as mandatory parameter in the constructor.
        #       - to check if required property is not None (e.g. by calling setter)
        #       - ApiClient.__deserialize_model has to be adapted as well
        if recipient is not None:
          self.recipient = recipient
        if type is not None:
          self.type = type
        if received_at is not None:
          self.received_at = received_at
        if details is not None:
          self.details = details

    @property
    def recipient(self):
        """
        Gets the recipient of this MessageEventDetails.

        :return: The recipient of this MessageEventDetails.
        :rtype: str
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient):
        """
        Sets the recipient of this MessageEventDetails.

        :param recipient: The recipient of this MessageEventDetails.
        :type: str
        """

        self._recipient = recipient

    @property
    def type(self):
        """
        Gets the type of this MessageEventDetails.

        :return: The type of this MessageEventDetails.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this MessageEventDetails.

        :param type: The type of this MessageEventDetails.
        :type: str
        """

        self._type = type

    @property
    def received_at(self):
        """
        Gets the received_at of this MessageEventDetails.

        :return: The received_at of this MessageEventDetails.
        :rtype: datetime
        """
        return self._received_at

    @received_at.setter
    def received_at(self, received_at):
        """
        Sets the received_at of this MessageEventDetails.

        :param received_at: The received_at of this MessageEventDetails.
        :type: datetime
        """

        self._received_at = received_at

    @property
    def details(self):
        """
        Gets the details of this MessageEventDetails.

        :return: The details of this MessageEventDetails.
        :rtype: MessageEventDetailsDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """
        Sets the details of this MessageEventDetails.

        :param details: The details of this MessageEventDetails.
        :type: MessageEventDetailsDetails
        """

        self._details = details

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MessageEventDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
