# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class OutboundMessageDetailsResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, text_body=None, html_body=None, body=None, tag=None, message_id=None, to=None, cc=None, bcc=None, recipients=None, received_at=None, _from=None, subject=None, attachments=None, status=None, track_opens=None, track_links=None, message_events=None):
        """
        OutboundMessageDetailsResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'text_body': 'str',
            'html_body': 'str',
            'body': 'str',
            'tag': 'str',
            'message_id': 'str',
            'to': 'list[EmailNameAddressPair]',
            'cc': 'list[EmailNameAddressPair]',
            'bcc': 'list[EmailNameAddressPair]',
            'recipients': 'list[str]',
            'received_at': 'datetime',
            '_from': 'str',
            'subject': 'str',
            'attachments': 'AttachmentCollection',
            'status': 'str',
            'track_opens': 'bool',
            'track_links': 'str',
            'message_events': 'list[MessageEventDetails]'
        }

        self.attribute_map = {
            'text_body': 'TextBody',
            'html_body': 'HtmlBody',
            'body': 'Body',
            'tag': 'Tag',
            'message_id': 'MessageID',
            'to': 'To',
            'cc': 'Cc',
            'bcc': 'Bcc',
            'recipients': 'Recipients',
            'received_at': 'ReceivedAt',
            '_from': 'From',
            'subject': 'Subject',
            'attachments': 'Attachments',
            'status': 'Status',
            'track_opens': 'TrackOpens',
            'track_links': 'TrackLinks',
            'message_events': 'MessageEvents'
        }

        self._text_body = None
        self._html_body = None
        self._body = None
        self._tag = None
        self._message_id = None
        self._to = None
        self._cc = None
        self._bcc = None
        self._recipients = None
        self._received_at = None
        self.__from = None
        self._subject = None
        self._attachments = None
        self._status = None
        self._track_opens = None
        self._track_links = None
        self._message_events = None

        # TODO: let required properties as mandatory parameter in the constructor.
        #       - to check if required property is not None (e.g. by calling setter)
        #       - ApiClient.__deserialize_model has to be adapted as well
        if text_body is not None:
          self.text_body = text_body
        if html_body is not None:
          self.html_body = html_body
        if body is not None:
          self.body = body
        if tag is not None:
          self.tag = tag
        if message_id is not None:
          self.message_id = message_id
        if to is not None:
          self.to = to
        if cc is not None:
          self.cc = cc
        if bcc is not None:
          self.bcc = bcc
        if recipients is not None:
          self.recipients = recipients
        if received_at is not None:
          self.received_at = received_at
        if _from is not None:
          self._from = _from
        if subject is not None:
          self.subject = subject
        if attachments is not None:
          self.attachments = attachments
        if status is not None:
          self.status = status
        if track_opens is not None:
          self.track_opens = track_opens
        if track_links is not None:
          self.track_links = track_links
        if message_events is not None:
          self.message_events = message_events

    @property
    def text_body(self):
        """
        Gets the text_body of this OutboundMessageDetailsResponse.

        :return: The text_body of this OutboundMessageDetailsResponse.
        :rtype: str
        """
        return self._text_body

    @text_body.setter
    def text_body(self, text_body):
        """
        Sets the text_body of this OutboundMessageDetailsResponse.

        :param text_body: The text_body of this OutboundMessageDetailsResponse.
        :type: str
        """

        self._text_body = text_body

    @property
    def html_body(self):
        """
        Gets the html_body of this OutboundMessageDetailsResponse.

        :return: The html_body of this OutboundMessageDetailsResponse.
        :rtype: str
        """
        return self._html_body

    @html_body.setter
    def html_body(self, html_body):
        """
        Sets the html_body of this OutboundMessageDetailsResponse.

        :param html_body: The html_body of this OutboundMessageDetailsResponse.
        :type: str
        """

        self._html_body = html_body

    @property
    def body(self):
        """
        Gets the body of this OutboundMessageDetailsResponse.

        :return: The body of this OutboundMessageDetailsResponse.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """
        Sets the body of this OutboundMessageDetailsResponse.

        :param body: The body of this OutboundMessageDetailsResponse.
        :type: str
        """

        self._body = body

    @property
    def tag(self):
        """
        Gets the tag of this OutboundMessageDetailsResponse.

        :return: The tag of this OutboundMessageDetailsResponse.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """
        Sets the tag of this OutboundMessageDetailsResponse.

        :param tag: The tag of this OutboundMessageDetailsResponse.
        :type: str
        """

        self._tag = tag

    @property
    def message_id(self):
        """
        Gets the message_id of this OutboundMessageDetailsResponse.

        :return: The message_id of this OutboundMessageDetailsResponse.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """
        Sets the message_id of this OutboundMessageDetailsResponse.

        :param message_id: The message_id of this OutboundMessageDetailsResponse.
        :type: str
        """

        self._message_id = message_id

    @property
    def to(self):
        """
        Gets the to of this OutboundMessageDetailsResponse.

        :return: The to of this OutboundMessageDetailsResponse.
        :rtype: list[EmailNameAddressPair]
        """
        return self._to

    @to.setter
    def to(self, to):
        """
        Sets the to of this OutboundMessageDetailsResponse.

        :param to: The to of this OutboundMessageDetailsResponse.
        :type: list[EmailNameAddressPair]
        """

        self._to = to

    @property
    def cc(self):
        """
        Gets the cc of this OutboundMessageDetailsResponse.

        :return: The cc of this OutboundMessageDetailsResponse.
        :rtype: list[EmailNameAddressPair]
        """
        return self._cc

    @cc.setter
    def cc(self, cc):
        """
        Sets the cc of this OutboundMessageDetailsResponse.

        :param cc: The cc of this OutboundMessageDetailsResponse.
        :type: list[EmailNameAddressPair]
        """

        self._cc = cc

    @property
    def bcc(self):
        """
        Gets the bcc of this OutboundMessageDetailsResponse.

        :return: The bcc of this OutboundMessageDetailsResponse.
        :rtype: list[EmailNameAddressPair]
        """
        return self._bcc

    @bcc.setter
    def bcc(self, bcc):
        """
        Sets the bcc of this OutboundMessageDetailsResponse.

        :param bcc: The bcc of this OutboundMessageDetailsResponse.
        :type: list[EmailNameAddressPair]
        """

        self._bcc = bcc

    @property
    def recipients(self):
        """
        Gets the recipients of this OutboundMessageDetailsResponse.

        :return: The recipients of this OutboundMessageDetailsResponse.
        :rtype: list[str]
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """
        Sets the recipients of this OutboundMessageDetailsResponse.

        :param recipients: The recipients of this OutboundMessageDetailsResponse.
        :type: list[str]
        """

        self._recipients = recipients

    @property
    def received_at(self):
        """
        Gets the received_at of this OutboundMessageDetailsResponse.

        :return: The received_at of this OutboundMessageDetailsResponse.
        :rtype: datetime
        """
        return self._received_at

    @received_at.setter
    def received_at(self, received_at):
        """
        Sets the received_at of this OutboundMessageDetailsResponse.

        :param received_at: The received_at of this OutboundMessageDetailsResponse.
        :type: datetime
        """

        self._received_at = received_at

    @property
    def _from(self):
        """
        Gets the _from of this OutboundMessageDetailsResponse.

        :return: The _from of this OutboundMessageDetailsResponse.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """
        Sets the _from of this OutboundMessageDetailsResponse.

        :param _from: The _from of this OutboundMessageDetailsResponse.
        :type: str
        """

        self.__from = _from

    @property
    def subject(self):
        """
        Gets the subject of this OutboundMessageDetailsResponse.

        :return: The subject of this OutboundMessageDetailsResponse.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this OutboundMessageDetailsResponse.

        :param subject: The subject of this OutboundMessageDetailsResponse.
        :type: str
        """

        self._subject = subject

    @property
    def attachments(self):
        """
        Gets the attachments of this OutboundMessageDetailsResponse.

        :return: The attachments of this OutboundMessageDetailsResponse.
        :rtype: AttachmentCollection
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """
        Sets the attachments of this OutboundMessageDetailsResponse.

        :param attachments: The attachments of this OutboundMessageDetailsResponse.
        :type: AttachmentCollection
        """

        self._attachments = attachments

    @property
    def status(self):
        """
        Gets the status of this OutboundMessageDetailsResponse.

        :return: The status of this OutboundMessageDetailsResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this OutboundMessageDetailsResponse.

        :param status: The status of this OutboundMessageDetailsResponse.
        :type: str
        """

        self._status = status

    @property
    def track_opens(self):
        """
        Gets the track_opens of this OutboundMessageDetailsResponse.

        :return: The track_opens of this OutboundMessageDetailsResponse.
        :rtype: bool
        """
        return self._track_opens

    @track_opens.setter
    def track_opens(self, track_opens):
        """
        Sets the track_opens of this OutboundMessageDetailsResponse.

        :param track_opens: The track_opens of this OutboundMessageDetailsResponse.
        :type: bool
        """

        self._track_opens = track_opens

    @property
    def track_links(self):
        """
        Gets the track_links of this OutboundMessageDetailsResponse.

        :return: The track_links of this OutboundMessageDetailsResponse.
        :rtype: str
        """
        return self._track_links

    @track_links.setter
    def track_links(self, track_links):
        """
        Sets the track_links of this OutboundMessageDetailsResponse.

        :param track_links: The track_links of this OutboundMessageDetailsResponse.
        :type: str
        """
        allowed_values = ["None", "HtmlAndText", "HtmlOnly", "TextOnly"]
        if track_links not in allowed_values:
            raise ValueError(
                "Invalid value for `track_links` ({0}), must be one of {1}"
                .format(track_links, allowed_values)
            )

        self._track_links = track_links

    @property
    def message_events(self):
        """
        Gets the message_events of this OutboundMessageDetailsResponse.

        :return: The message_events of this OutboundMessageDetailsResponse.
        :rtype: list[MessageEventDetails]
        """
        return self._message_events

    @message_events.setter
    def message_events(self, message_events):
        """
        Sets the message_events of this OutboundMessageDetailsResponse.

        :param message_events: The message_events of this OutboundMessageDetailsResponse.
        :type: list[MessageEventDetails]
        """

        self._message_events = message_events

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, OutboundMessageDetailsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
