# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TemplateValidationRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, subject=None, html_body=None, text_body=None, text_render_model=None, inline_css_for_html_test_render=True):
        """
        TemplateValidationRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'subject': 'str',
            'html_body': 'str',
            'text_body': 'str',
            'text_render_model': 'object',
            'inline_css_for_html_test_render': 'bool'
        }

        self.attribute_map = {
            'subject': 'Subject',
            'html_body': 'HtmlBody',
            'text_body': 'TextBody',
            'text_render_model': 'TextRenderModel',
            'inline_css_for_html_test_render': 'InlineCssForHtmlTestRender'
        }

        self._subject = None
        self._html_body = None
        self._text_body = None
        self._text_render_model = None
        self._inline_css_for_html_test_render = None

        # TODO: let required properties as mandatory parameter in the constructor.
        #       - to check if required property is not None (e.g. by calling setter)
        #       - ApiClient.__deserialize_model has to be adapted as well
        if subject is not None:
          self.subject = subject
        if html_body is not None:
          self.html_body = html_body
        if text_body is not None:
          self.text_body = text_body
        if text_render_model is not None:
          self.text_render_model = text_render_model
        if inline_css_for_html_test_render is not None:
          self.inline_css_for_html_test_render = inline_css_for_html_test_render

    @property
    def subject(self):
        """
        Gets the subject of this TemplateValidationRequest.
        The subject content to validate. Must be specified if HtmlBody or TextBody are not. See our template language documentation for more information on the syntax for this field. 

        :return: The subject of this TemplateValidationRequest.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this TemplateValidationRequest.
        The subject content to validate. Must be specified if HtmlBody or TextBody are not. See our template language documentation for more information on the syntax for this field. 

        :param subject: The subject of this TemplateValidationRequest.
        :type: str
        """

        self._subject = subject

    @property
    def html_body(self):
        """
        Gets the html_body of this TemplateValidationRequest.
        The html body content to validate. Must be specified if Subject or TextBody are not. See our template language documentation for more information on the syntax for this field. 

        :return: The html_body of this TemplateValidationRequest.
        :rtype: str
        """
        return self._html_body

    @html_body.setter
    def html_body(self, html_body):
        """
        Sets the html_body of this TemplateValidationRequest.
        The html body content to validate. Must be specified if Subject or TextBody are not. See our template language documentation for more information on the syntax for this field. 

        :param html_body: The html_body of this TemplateValidationRequest.
        :type: str
        """

        self._html_body = html_body

    @property
    def text_body(self):
        """
        Gets the text_body of this TemplateValidationRequest.
        The text body content to validate. Must be specified if HtmlBody or Subject are not. See our template language documentation for more information on the syntax for this field. 

        :return: The text_body of this TemplateValidationRequest.
        :rtype: str
        """
        return self._text_body

    @text_body.setter
    def text_body(self, text_body):
        """
        Sets the text_body of this TemplateValidationRequest.
        The text body content to validate. Must be specified if HtmlBody or Subject are not. See our template language documentation for more information on the syntax for this field. 

        :param text_body: The text_body of this TemplateValidationRequest.
        :type: str
        """

        self._text_body = text_body

    @property
    def text_render_model(self):
        """
        Gets the text_render_model of this TemplateValidationRequest.
        The model to be used when rendering test content.

        :return: The text_render_model of this TemplateValidationRequest.
        :rtype: object
        """
        return self._text_render_model

    @text_render_model.setter
    def text_render_model(self, text_render_model):
        """
        Sets the text_render_model of this TemplateValidationRequest.
        The model to be used when rendering test content.

        :param text_render_model: The text_render_model of this TemplateValidationRequest.
        :type: object
        """

        self._text_render_model = text_render_model

    @property
    def inline_css_for_html_test_render(self):
        """
        Gets the inline_css_for_html_test_render of this TemplateValidationRequest.
        When HtmlBody is specified, the test render will have style blocks inlined as style attributes on matching html elements. You may disable the css inlining behavior by passing false for this parameter. 

        :return: The inline_css_for_html_test_render of this TemplateValidationRequest.
        :rtype: bool
        """
        return self._inline_css_for_html_test_render

    @inline_css_for_html_test_render.setter
    def inline_css_for_html_test_render(self, inline_css_for_html_test_render):
        """
        Sets the inline_css_for_html_test_render of this TemplateValidationRequest.
        When HtmlBody is specified, the test render will have style blocks inlined as style attributes on matching html elements. You may disable the css inlining behavior by passing false for this parameter. 

        :param inline_css_for_html_test_render: The inline_css_for_html_test_render of this TemplateValidationRequest.
        :type: bool
        """

        self._inline_css_for_html_test_render = inline_css_for_html_test_render

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TemplateValidationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
