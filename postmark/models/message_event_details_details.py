# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MessageEventDetailsDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, summary=None, bounce_id=None, delivery_message=None, destination_server=None, destination_ip=None):
        """
        MessageEventDetailsDetails - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'summary': 'str',
            'bounce_id': 'str',
            'delivery_message': 'str',
            'destination_server': 'str',
            'destination_ip': 'str'
        }

        self.attribute_map = {
            'summary': 'Summary',
            'bounce_id': 'BounceID',
            'delivery_message': 'DeliveryMessage',
            'destination_server': 'DestinationServer',
            'destination_ip': 'DestinationIP'
        }

        self._summary = None
        self._bounce_id = None
        self._delivery_message = None
        self._destination_server = None
        self._destination_ip = None

        # TODO: let required properties as mandatory parameter in the constructor.
        #       - to check if required property is not None (e.g. by calling setter)
        #       - ApiClient.__deserialize_model has to be adapted as well
        if summary is not None:
          self.summary = summary
        if bounce_id is not None:
          self.bounce_id = bounce_id
        if delivery_message is not None:
          self.delivery_message = delivery_message
        if destination_server is not None:
          self.destination_server = destination_server
        if destination_ip is not None:
          self.destination_ip = destination_ip

    @property
    def summary(self):
        """
        Gets the summary of this MessageEventDetailsDetails.

        :return: The summary of this MessageEventDetailsDetails.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """
        Sets the summary of this MessageEventDetailsDetails.

        :param summary: The summary of this MessageEventDetailsDetails.
        :type: str
        """

        self._summary = summary

    @property
    def bounce_id(self):
        """
        Gets the bounce_id of this MessageEventDetailsDetails.

        :return: The bounce_id of this MessageEventDetailsDetails.
        :rtype: str
        """
        return self._bounce_id

    @bounce_id.setter
    def bounce_id(self, bounce_id):
        """
        Sets the bounce_id of this MessageEventDetailsDetails.

        :param bounce_id: The bounce_id of this MessageEventDetailsDetails.
        :type: str
        """

        self._bounce_id = bounce_id

    @property
    def delivery_message(self):
        """
        Gets the delivery_message of this MessageEventDetailsDetails.

        :return: The delivery_message of this MessageEventDetailsDetails.
        :rtype: str
        """
        return self._delivery_message

    @delivery_message.setter
    def delivery_message(self, delivery_message):
        """
        Sets the delivery_message of this MessageEventDetailsDetails.

        :param delivery_message: The delivery_message of this MessageEventDetailsDetails.
        :type: str
        """

        self._delivery_message = delivery_message

    @property
    def destination_server(self):
        """
        Gets the destination_server of this MessageEventDetailsDetails.

        :return: The destination_server of this MessageEventDetailsDetails.
        :rtype: str
        """
        return self._destination_server

    @destination_server.setter
    def destination_server(self, destination_server):
        """
        Sets the destination_server of this MessageEventDetailsDetails.

        :param destination_server: The destination_server of this MessageEventDetailsDetails.
        :type: str
        """

        self._destination_server = destination_server

    @property
    def destination_ip(self):
        """
        Gets the destination_ip of this MessageEventDetailsDetails.

        :return: The destination_ip of this MessageEventDetailsDetails.
        :rtype: str
        """
        return self._destination_ip

    @destination_ip.setter
    def destination_ip(self, destination_ip):
        """
        Sets the destination_ip of this MessageEventDetailsDetails.

        :param destination_ip: The destination_ip of this MessageEventDetailsDetails.
        :type: str
        """

        self._destination_ip = destination_ip

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MessageEventDetailsDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
