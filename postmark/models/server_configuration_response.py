# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ServerConfigurationResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, api_tokens=None, server_link=None, color=None, inbound_address=None, raw_email_enabled=None, delivery_hook_url=None, smtp_api_activated=None, inbound_hook_url=None, bounce_hook_url=None, open_hook_url=None, post_first_open_only=None, track_opens=None, track_links=None, inbound_domain=None, inbound_hash=None, inbound_spam_threshold=None):
        """
        ServerConfigurationResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'name': 'str',
            'api_tokens': 'list[str]',
            'server_link': 'str',
            'color': 'str',
            'inbound_address': 'str',
            'raw_email_enabled': 'bool',
            'delivery_hook_url': 'str',
            'smtp_api_activated': 'bool',
            'inbound_hook_url': 'str',
            'bounce_hook_url': 'str',
            'open_hook_url': 'str',
            'post_first_open_only': 'bool',
            'track_opens': 'bool',
            'track_links': 'str',
            'inbound_domain': 'str',
            'inbound_hash': 'str',
            'inbound_spam_threshold': 'int'
        }

        self.attribute_map = {
            'id': 'ID',
            'name': 'Name',
            'api_tokens': 'ApiTokens',
            'server_link': 'ServerLink',
            'color': 'Color',
            'inbound_address': 'InboundAddress',
            'raw_email_enabled': 'RawEmailEnabled',
            'delivery_hook_url': 'DeliveryHookUrl',
            'smtp_api_activated': 'SmtpApiActivated',
            'inbound_hook_url': 'InboundHookUrl',
            'bounce_hook_url': 'BounceHookUrl',
            'open_hook_url': 'OpenHookUrl',
            'post_first_open_only': 'PostFirstOpenOnly',
            'track_opens': 'TrackOpens',
            'track_links': 'TrackLinks',
            'inbound_domain': 'InboundDomain',
            'inbound_hash': 'InboundHash',
            'inbound_spam_threshold': 'InboundSpamThreshold'
        }

        self._id = None
        self._name = None
        self._api_tokens = None
        self._server_link = None
        self._color = None
        self._inbound_address = None
        self._raw_email_enabled = None
        self._delivery_hook_url = None
        self._smtp_api_activated = None
        self._inbound_hook_url = None
        self._bounce_hook_url = None
        self._open_hook_url = None
        self._post_first_open_only = None
        self._track_opens = None
        self._track_links = None
        self._inbound_domain = None
        self._inbound_hash = None
        self._inbound_spam_threshold = None

        # TODO: let required properties as mandatory parameter in the constructor.
        #       - to check if required property is not None (e.g. by calling setter)
        #       - ApiClient.__deserialize_model has to be adapted as well
        if id is not None:
          self.id = id
        if name is not None:
          self.name = name
        if api_tokens is not None:
          self.api_tokens = api_tokens
        if server_link is not None:
          self.server_link = server_link
        if color is not None:
          self.color = color
        if inbound_address is not None:
          self.inbound_address = inbound_address
        if raw_email_enabled is not None:
          self.raw_email_enabled = raw_email_enabled
        if delivery_hook_url is not None:
          self.delivery_hook_url = delivery_hook_url
        if smtp_api_activated is not None:
          self.smtp_api_activated = smtp_api_activated
        if inbound_hook_url is not None:
          self.inbound_hook_url = inbound_hook_url
        if bounce_hook_url is not None:
          self.bounce_hook_url = bounce_hook_url
        if open_hook_url is not None:
          self.open_hook_url = open_hook_url
        if post_first_open_only is not None:
          self.post_first_open_only = post_first_open_only
        if track_opens is not None:
          self.track_opens = track_opens
        if track_links is not None:
          self.track_links = track_links
        if inbound_domain is not None:
          self.inbound_domain = inbound_domain
        if inbound_hash is not None:
          self.inbound_hash = inbound_hash
        if inbound_spam_threshold is not None:
          self.inbound_spam_threshold = inbound_spam_threshold

    @property
    def id(self):
        """
        Gets the id of this ServerConfigurationResponse.

        :return: The id of this ServerConfigurationResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ServerConfigurationResponse.

        :param id: The id of this ServerConfigurationResponse.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this ServerConfigurationResponse.

        :return: The name of this ServerConfigurationResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ServerConfigurationResponse.

        :param name: The name of this ServerConfigurationResponse.
        :type: str
        """

        self._name = name

    @property
    def api_tokens(self):
        """
        Gets the api_tokens of this ServerConfigurationResponse.

        :return: The api_tokens of this ServerConfigurationResponse.
        :rtype: list[str]
        """
        return self._api_tokens

    @api_tokens.setter
    def api_tokens(self, api_tokens):
        """
        Sets the api_tokens of this ServerConfigurationResponse.

        :param api_tokens: The api_tokens of this ServerConfigurationResponse.
        :type: list[str]
        """

        self._api_tokens = api_tokens

    @property
    def server_link(self):
        """
        Gets the server_link of this ServerConfigurationResponse.

        :return: The server_link of this ServerConfigurationResponse.
        :rtype: str
        """
        return self._server_link

    @server_link.setter
    def server_link(self, server_link):
        """
        Sets the server_link of this ServerConfigurationResponse.

        :param server_link: The server_link of this ServerConfigurationResponse.
        :type: str
        """

        self._server_link = server_link

    @property
    def color(self):
        """
        Gets the color of this ServerConfigurationResponse.

        :return: The color of this ServerConfigurationResponse.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """
        Sets the color of this ServerConfigurationResponse.

        :param color: The color of this ServerConfigurationResponse.
        :type: str
        """
        allowed_values = ["purple", "blue", "turqoise", "green", "red", "yellow", "grey"]
        if color not in allowed_values:
            raise ValueError(
                "Invalid value for `color` ({0}), must be one of {1}"
                .format(color, allowed_values)
            )

        self._color = color

    @property
    def inbound_address(self):
        """
        Gets the inbound_address of this ServerConfigurationResponse.

        :return: The inbound_address of this ServerConfigurationResponse.
        :rtype: str
        """
        return self._inbound_address

    @inbound_address.setter
    def inbound_address(self, inbound_address):
        """
        Sets the inbound_address of this ServerConfigurationResponse.

        :param inbound_address: The inbound_address of this ServerConfigurationResponse.
        :type: str
        """

        self._inbound_address = inbound_address

    @property
    def raw_email_enabled(self):
        """
        Gets the raw_email_enabled of this ServerConfigurationResponse.

        :return: The raw_email_enabled of this ServerConfigurationResponse.
        :rtype: bool
        """
        return self._raw_email_enabled

    @raw_email_enabled.setter
    def raw_email_enabled(self, raw_email_enabled):
        """
        Sets the raw_email_enabled of this ServerConfigurationResponse.

        :param raw_email_enabled: The raw_email_enabled of this ServerConfigurationResponse.
        :type: bool
        """

        self._raw_email_enabled = raw_email_enabled

    @property
    def delivery_hook_url(self):
        """
        Gets the delivery_hook_url of this ServerConfigurationResponse.

        :return: The delivery_hook_url of this ServerConfigurationResponse.
        :rtype: str
        """
        return self._delivery_hook_url

    @delivery_hook_url.setter
    def delivery_hook_url(self, delivery_hook_url):
        """
        Sets the delivery_hook_url of this ServerConfigurationResponse.

        :param delivery_hook_url: The delivery_hook_url of this ServerConfigurationResponse.
        :type: str
        """

        self._delivery_hook_url = delivery_hook_url

    @property
    def smtp_api_activated(self):
        """
        Gets the smtp_api_activated of this ServerConfigurationResponse.

        :return: The smtp_api_activated of this ServerConfigurationResponse.
        :rtype: bool
        """
        return self._smtp_api_activated

    @smtp_api_activated.setter
    def smtp_api_activated(self, smtp_api_activated):
        """
        Sets the smtp_api_activated of this ServerConfigurationResponse.

        :param smtp_api_activated: The smtp_api_activated of this ServerConfigurationResponse.
        :type: bool
        """

        self._smtp_api_activated = smtp_api_activated

    @property
    def inbound_hook_url(self):
        """
        Gets the inbound_hook_url of this ServerConfigurationResponse.

        :return: The inbound_hook_url of this ServerConfigurationResponse.
        :rtype: str
        """
        return self._inbound_hook_url

    @inbound_hook_url.setter
    def inbound_hook_url(self, inbound_hook_url):
        """
        Sets the inbound_hook_url of this ServerConfigurationResponse.

        :param inbound_hook_url: The inbound_hook_url of this ServerConfigurationResponse.
        :type: str
        """

        self._inbound_hook_url = inbound_hook_url

    @property
    def bounce_hook_url(self):
        """
        Gets the bounce_hook_url of this ServerConfigurationResponse.

        :return: The bounce_hook_url of this ServerConfigurationResponse.
        :rtype: str
        """
        return self._bounce_hook_url

    @bounce_hook_url.setter
    def bounce_hook_url(self, bounce_hook_url):
        """
        Sets the bounce_hook_url of this ServerConfigurationResponse.

        :param bounce_hook_url: The bounce_hook_url of this ServerConfigurationResponse.
        :type: str
        """

        self._bounce_hook_url = bounce_hook_url

    @property
    def open_hook_url(self):
        """
        Gets the open_hook_url of this ServerConfigurationResponse.

        :return: The open_hook_url of this ServerConfigurationResponse.
        :rtype: str
        """
        return self._open_hook_url

    @open_hook_url.setter
    def open_hook_url(self, open_hook_url):
        """
        Sets the open_hook_url of this ServerConfigurationResponse.

        :param open_hook_url: The open_hook_url of this ServerConfigurationResponse.
        :type: str
        """

        self._open_hook_url = open_hook_url

    @property
    def post_first_open_only(self):
        """
        Gets the post_first_open_only of this ServerConfigurationResponse.

        :return: The post_first_open_only of this ServerConfigurationResponse.
        :rtype: bool
        """
        return self._post_first_open_only

    @post_first_open_only.setter
    def post_first_open_only(self, post_first_open_only):
        """
        Sets the post_first_open_only of this ServerConfigurationResponse.

        :param post_first_open_only: The post_first_open_only of this ServerConfigurationResponse.
        :type: bool
        """

        self._post_first_open_only = post_first_open_only

    @property
    def track_opens(self):
        """
        Gets the track_opens of this ServerConfigurationResponse.

        :return: The track_opens of this ServerConfigurationResponse.
        :rtype: bool
        """
        return self._track_opens

    @track_opens.setter
    def track_opens(self, track_opens):
        """
        Sets the track_opens of this ServerConfigurationResponse.

        :param track_opens: The track_opens of this ServerConfigurationResponse.
        :type: bool
        """

        self._track_opens = track_opens

    @property
    def track_links(self):
        """
        Gets the track_links of this ServerConfigurationResponse.

        :return: The track_links of this ServerConfigurationResponse.
        :rtype: str
        """
        return self._track_links

    @track_links.setter
    def track_links(self, track_links):
        """
        Sets the track_links of this ServerConfigurationResponse.

        :param track_links: The track_links of this ServerConfigurationResponse.
        :type: str
        """
        allowed_values = ["None", "HtmlAndText", "HtmlOnly", "TextOnly"]
        if track_links not in allowed_values:
            raise ValueError(
                "Invalid value for `track_links` ({0}), must be one of {1}"
                .format(track_links, allowed_values)
            )

        self._track_links = track_links

    @property
    def inbound_domain(self):
        """
        Gets the inbound_domain of this ServerConfigurationResponse.

        :return: The inbound_domain of this ServerConfigurationResponse.
        :rtype: str
        """
        return self._inbound_domain

    @inbound_domain.setter
    def inbound_domain(self, inbound_domain):
        """
        Sets the inbound_domain of this ServerConfigurationResponse.

        :param inbound_domain: The inbound_domain of this ServerConfigurationResponse.
        :type: str
        """

        self._inbound_domain = inbound_domain

    @property
    def inbound_hash(self):
        """
        Gets the inbound_hash of this ServerConfigurationResponse.

        :return: The inbound_hash of this ServerConfigurationResponse.
        :rtype: str
        """
        return self._inbound_hash

    @inbound_hash.setter
    def inbound_hash(self, inbound_hash):
        """
        Sets the inbound_hash of this ServerConfigurationResponse.

        :param inbound_hash: The inbound_hash of this ServerConfigurationResponse.
        :type: str
        """

        self._inbound_hash = inbound_hash

    @property
    def inbound_spam_threshold(self):
        """
        Gets the inbound_spam_threshold of this ServerConfigurationResponse.

        :return: The inbound_spam_threshold of this ServerConfigurationResponse.
        :rtype: int
        """
        return self._inbound_spam_threshold

    @inbound_spam_threshold.setter
    def inbound_spam_threshold(self, inbound_spam_threshold):
        """
        Sets the inbound_spam_threshold of this ServerConfigurationResponse.

        :param inbound_spam_threshold: The inbound_spam_threshold of this ServerConfigurationResponse.
        :type: int
        """

        self._inbound_spam_threshold = inbound_spam_threshold

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ServerConfigurationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
