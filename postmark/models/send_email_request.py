# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SendEmailRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, _from=None, to=None, cc=None, bcc=None, subject=None, tag=None, html_body=None, text_body=None, reply_to=None, track_opens=None, track_links=None, headers=None, attachments=None):
        """
        SendEmailRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            '_from': 'str',
            'to': 'str',
            'cc': 'str',
            'bcc': 'str',
            'subject': 'str',
            'tag': 'str',
            'html_body': 'str',
            'text_body': 'str',
            'reply_to': 'str',
            'track_opens': 'bool',
            'track_links': 'str',
            'headers': 'HeaderCollection',
            'attachments': 'AttachmentCollection'
        }

        self.attribute_map = {
            '_from': 'From',
            'to': 'To',
            'cc': 'Cc',
            'bcc': 'Bcc',
            'subject': 'Subject',
            'tag': 'Tag',
            'html_body': 'HtmlBody',
            'text_body': 'TextBody',
            'reply_to': 'ReplyTo',
            'track_opens': 'TrackOpens',
            'track_links': 'TrackLinks',
            'headers': 'Headers',
            'attachments': 'Attachments'
        }

        self.__from = None
        self._to = None
        self._cc = None
        self._bcc = None
        self._subject = None
        self._tag = None
        self._html_body = None
        self._text_body = None
        self._reply_to = None
        self._track_opens = None
        self._track_links = None
        self._headers = None
        self._attachments = None

        # TODO: let required properties as mandatory parameter in the constructor.
        #       - to check if required property is not None (e.g. by calling setter)
        #       - ApiClient.__deserialize_model has to be adapted as well
        if _from is not None:
          self._from = _from
        if to is not None:
          self.to = to
        if cc is not None:
          self.cc = cc
        if bcc is not None:
          self.bcc = bcc
        if subject is not None:
          self.subject = subject
        if tag is not None:
          self.tag = tag
        if html_body is not None:
          self.html_body = html_body
        if text_body is not None:
          self.text_body = text_body
        if reply_to is not None:
          self.reply_to = reply_to
        if track_opens is not None:
          self.track_opens = track_opens
        if track_links is not None:
          self.track_links = track_links
        if headers is not None:
          self.headers = headers
        if attachments is not None:
          self.attachments = attachments

    @property
    def _from(self):
        """
        Gets the _from of this SendEmailRequest.
        The sender email address. Must have a registered and confirmed Sender Signature.

        :return: The _from of this SendEmailRequest.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """
        Sets the _from of this SendEmailRequest.
        The sender email address. Must have a registered and confirmed Sender Signature.

        :param _from: The _from of this SendEmailRequest.
        :type: str
        """

        self.__from = _from

    @property
    def to(self):
        """
        Gets the to of this SendEmailRequest.
        Recipient email address. Multiple addresses are comma seperated. Max 50.

        :return: The to of this SendEmailRequest.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """
        Sets the to of this SendEmailRequest.
        Recipient email address. Multiple addresses are comma seperated. Max 50.

        :param to: The to of this SendEmailRequest.
        :type: str
        """

        self._to = to

    @property
    def cc(self):
        """
        Gets the cc of this SendEmailRequest.
        Recipient email address. Multiple addresses are comma seperated. Max 50.

        :return: The cc of this SendEmailRequest.
        :rtype: str
        """
        return self._cc

    @cc.setter
    def cc(self, cc):
        """
        Sets the cc of this SendEmailRequest.
        Recipient email address. Multiple addresses are comma seperated. Max 50.

        :param cc: The cc of this SendEmailRequest.
        :type: str
        """

        self._cc = cc

    @property
    def bcc(self):
        """
        Gets the bcc of this SendEmailRequest.
        Bcc recipient email address. Multiple addresses are comma seperated. Max 50.

        :return: The bcc of this SendEmailRequest.
        :rtype: str
        """
        return self._bcc

    @bcc.setter
    def bcc(self, bcc):
        """
        Sets the bcc of this SendEmailRequest.
        Bcc recipient email address. Multiple addresses are comma seperated. Max 50.

        :param bcc: The bcc of this SendEmailRequest.
        :type: str
        """

        self._bcc = bcc

    @property
    def subject(self):
        """
        Gets the subject of this SendEmailRequest.
        Email Subject

        :return: The subject of this SendEmailRequest.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this SendEmailRequest.
        Email Subject

        :param subject: The subject of this SendEmailRequest.
        :type: str
        """

        self._subject = subject

    @property
    def tag(self):
        """
        Gets the tag of this SendEmailRequest.
        Email tag that allows you to categorize outgoing emails and get detailed statistics.

        :return: The tag of this SendEmailRequest.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """
        Sets the tag of this SendEmailRequest.
        Email tag that allows you to categorize outgoing emails and get detailed statistics.

        :param tag: The tag of this SendEmailRequest.
        :type: str
        """

        self._tag = tag

    @property
    def html_body(self):
        """
        Gets the html_body of this SendEmailRequest.
        If no TextBody specified HTML email message

        :return: The html_body of this SendEmailRequest.
        :rtype: str
        """
        return self._html_body

    @html_body.setter
    def html_body(self, html_body):
        """
        Sets the html_body of this SendEmailRequest.
        If no TextBody specified HTML email message

        :param html_body: The html_body of this SendEmailRequest.
        :type: str
        """

        self._html_body = html_body

    @property
    def text_body(self):
        """
        Gets the text_body of this SendEmailRequest.
        If no HtmlBody specified Plain text email message

        :return: The text_body of this SendEmailRequest.
        :rtype: str
        """
        return self._text_body

    @text_body.setter
    def text_body(self, text_body):
        """
        Sets the text_body of this SendEmailRequest.
        If no HtmlBody specified Plain text email message

        :param text_body: The text_body of this SendEmailRequest.
        :type: str
        """

        self._text_body = text_body

    @property
    def reply_to(self):
        """
        Gets the reply_to of this SendEmailRequest.
        Reply To override email address. Defaults to the Reply To set in the sender signature.

        :return: The reply_to of this SendEmailRequest.
        :rtype: str
        """
        return self._reply_to

    @reply_to.setter
    def reply_to(self, reply_to):
        """
        Sets the reply_to of this SendEmailRequest.
        Reply To override email address. Defaults to the Reply To set in the sender signature.

        :param reply_to: The reply_to of this SendEmailRequest.
        :type: str
        """

        self._reply_to = reply_to

    @property
    def track_opens(self):
        """
        Gets the track_opens of this SendEmailRequest.
        Activate open tracking for this email.

        :return: The track_opens of this SendEmailRequest.
        :rtype: bool
        """
        return self._track_opens

    @track_opens.setter
    def track_opens(self, track_opens):
        """
        Sets the track_opens of this SendEmailRequest.
        Activate open tracking for this email.

        :param track_opens: The track_opens of this SendEmailRequest.
        :type: bool
        """

        self._track_opens = track_opens

    @property
    def track_links(self):
        """
        Gets the track_links of this SendEmailRequest.
        Replace links in content to enable \"click tracking\" stats. Default is 'null', which uses the server's LinkTracking setting'.

        :return: The track_links of this SendEmailRequest.
        :rtype: str
        """
        return self._track_links

    @track_links.setter
    def track_links(self, track_links):
        """
        Sets the track_links of this SendEmailRequest.
        Replace links in content to enable \"click tracking\" stats. Default is 'null', which uses the server's LinkTracking setting'.

        :param track_links: The track_links of this SendEmailRequest.
        :type: str
        """
        allowed_values = ["None", "HtmlAndText", "HtmlOnly", "TextOnly"]
        if track_links not in allowed_values:
            raise ValueError(
                "Invalid value for `track_links` ({0}), must be one of {1}"
                .format(track_links, allowed_values)
            )

        self._track_links = track_links

    @property
    def headers(self):
        """
        Gets the headers of this SendEmailRequest.

        :return: The headers of this SendEmailRequest.
        :rtype: HeaderCollection
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """
        Sets the headers of this SendEmailRequest.

        :param headers: The headers of this SendEmailRequest.
        :type: HeaderCollection
        """

        self._headers = headers

    @property
    def attachments(self):
        """
        Gets the attachments of this SendEmailRequest.

        :return: The attachments of this SendEmailRequest.
        :rtype: AttachmentCollection
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """
        Sets the attachments of this SendEmailRequest.

        :param attachments: The attachments of this SendEmailRequest.
        :type: AttachmentCollection
        """

        self._attachments = attachments

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SendEmailRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
