# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EditTagTriggerRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, match_name=None, track_opens=None):
        """
        EditTagTriggerRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'match_name': 'str',
            'track_opens': 'bool'
        }

        self.attribute_map = {
            'match_name': 'MatchName',
            'track_opens': 'TrackOpens'
        }

        self._match_name = None
        self._track_opens = None

        # TODO: let required properties as mandatory parameter in the constructor.
        #       - to check if required property is not None (e.g. by calling setter)
        #       - ApiClient.__deserialize_model has to be adapted as well
        if match_name is not None:
          self.match_name = match_name
        if track_opens is not None:
          self.track_opens = track_opens

    @property
    def match_name(self):
        """
        Gets the match_name of this EditTagTriggerRequest.

        :return: The match_name of this EditTagTriggerRequest.
        :rtype: str
        """
        return self._match_name

    @match_name.setter
    def match_name(self, match_name):
        """
        Sets the match_name of this EditTagTriggerRequest.

        :param match_name: The match_name of this EditTagTriggerRequest.
        :type: str
        """

        self._match_name = match_name

    @property
    def track_opens(self):
        """
        Gets the track_opens of this EditTagTriggerRequest.

        :return: The track_opens of this EditTagTriggerRequest.
        :rtype: bool
        """
        return self._track_opens

    @track_opens.setter
    def track_opens(self, track_opens):
        """
        Sets the track_opens of this EditTagTriggerRequest.

        :param track_opens: The track_opens of this EditTagTriggerRequest.
        :type: bool
        """

        self._track_opens = track_opens

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EditTagTriggerRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
