# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TemplateValidationResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, content_is_valid=None, validation_errors=None, rendered_content=None):
        """
        TemplateValidationResult - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'content_is_valid': 'bool',
            'validation_errors': 'list[TemplateValidationError]',
            'rendered_content': 'str'
        }

        self.attribute_map = {
            'content_is_valid': 'ContentIsValid',
            'validation_errors': 'ValidationErrors',
            'rendered_content': 'RenderedContent'
        }

        self._content_is_valid = None
        self._validation_errors = None
        self._rendered_content = None

        # TODO: let required properties as mandatory parameter in the constructor.
        #       - to check if required property is not None (e.g. by calling setter)
        #       - ApiClient.__deserialize_model has to be adapted as well
        if content_is_valid is not None:
          self.content_is_valid = content_is_valid
        if validation_errors is not None:
          self.validation_errors = validation_errors
        if rendered_content is not None:
          self.rendered_content = rendered_content

    @property
    def content_is_valid(self):
        """
        Gets the content_is_valid of this TemplateValidationResult.

        :return: The content_is_valid of this TemplateValidationResult.
        :rtype: bool
        """
        return self._content_is_valid

    @content_is_valid.setter
    def content_is_valid(self, content_is_valid):
        """
        Sets the content_is_valid of this TemplateValidationResult.

        :param content_is_valid: The content_is_valid of this TemplateValidationResult.
        :type: bool
        """

        self._content_is_valid = content_is_valid

    @property
    def validation_errors(self):
        """
        Gets the validation_errors of this TemplateValidationResult.

        :return: The validation_errors of this TemplateValidationResult.
        :rtype: list[TemplateValidationError]
        """
        return self._validation_errors

    @validation_errors.setter
    def validation_errors(self, validation_errors):
        """
        Sets the validation_errors of this TemplateValidationResult.

        :param validation_errors: The validation_errors of this TemplateValidationResult.
        :type: list[TemplateValidationError]
        """

        self._validation_errors = validation_errors

    @property
    def rendered_content(self):
        """
        Gets the rendered_content of this TemplateValidationResult.

        :return: The rendered_content of this TemplateValidationResult.
        :rtype: str
        """
        return self._rendered_content

    @rendered_content.setter
    def rendered_content(self, rendered_content):
        """
        Sets the rendered_content of this TemplateValidationResult.

        :param rendered_content: The rendered_content of this TemplateValidationResult.
        :type: str
        """

        self._rendered_content = rendered_content

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TemplateValidationResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
