# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TemplateRecordResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, template_id=None, active=None):
        """
        TemplateRecordResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'template_id': 'float',
            'active': 'bool'
        }

        self.attribute_map = {
            'name': 'Name',
            'template_id': 'TemplateId',
            'active': 'Active'
        }

        self._name = None
        self._template_id = None
        self._active = None

        # TODO: let required properties as mandatory parameter in the constructor.
        #       - to check if required property is not None (e.g. by calling setter)
        #       - ApiClient.__deserialize_model has to be adapted as well
        if name is not None:
          self.name = name
        if template_id is not None:
          self.template_id = template_id
        if active is not None:
          self.active = active

    @property
    def name(self):
        """
        Gets the name of this TemplateRecordResponse.
        The display name for this template.

        :return: The name of this TemplateRecordResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this TemplateRecordResponse.
        The display name for this template.

        :param name: The name of this TemplateRecordResponse.
        :type: str
        """

        self._name = name

    @property
    def template_id(self):
        """
        Gets the template_id of this TemplateRecordResponse.
        The associated ID for this template.

        :return: The template_id of this TemplateRecordResponse.
        :rtype: float
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """
        Sets the template_id of this TemplateRecordResponse.
        The associated ID for this template.

        :param template_id: The template_id of this TemplateRecordResponse.
        :type: float
        """

        self._template_id = template_id

    @property
    def active(self):
        """
        Gets the active of this TemplateRecordResponse.
        True if this template is currently available for use.

        :return: The active of this TemplateRecordResponse.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this TemplateRecordResponse.
        True if this template is currently available for use.

        :param active: The active of this TemplateRecordResponse.
        :type: bool
        """

        self._active = active

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TemplateRecordResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
