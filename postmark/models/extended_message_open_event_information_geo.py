# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ExtendedMessageOpenEventInformationGeo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, country_iso_code=None, country=None, region_iso_code=None, region=None, city=None, zip=None, coords=None, ip=None):
        """
        ExtendedMessageOpenEventInformationGeo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'country_iso_code': 'str',
            'country': 'str',
            'region_iso_code': 'str',
            'region': 'str',
            'city': 'str',
            'zip': 'str',
            'coords': 'str',
            'ip': 'str'
        }

        self.attribute_map = {
            'country_iso_code': 'CountryISOCode',
            'country': 'Country',
            'region_iso_code': 'RegionISOCode',
            'region': 'Region',
            'city': 'City',
            'zip': 'Zip',
            'coords': 'Coords',
            'ip': 'IP'
        }

        self._country_iso_code = None
        self._country = None
        self._region_iso_code = None
        self._region = None
        self._city = None
        self._zip = None
        self._coords = None
        self._ip = None

        # TODO: let required properties as mandatory parameter in the constructor.
        #       - to check if required property is not None (e.g. by calling setter)
        #       - ApiClient.__deserialize_model has to be adapted as well
        if country_iso_code is not None:
          self.country_iso_code = country_iso_code
        if country is not None:
          self.country = country
        if region_iso_code is not None:
          self.region_iso_code = region_iso_code
        if region is not None:
          self.region = region
        if city is not None:
          self.city = city
        if zip is not None:
          self.zip = zip
        if coords is not None:
          self.coords = coords
        if ip is not None:
          self.ip = ip

    @property
    def country_iso_code(self):
        """
        Gets the country_iso_code of this ExtendedMessageOpenEventInformationGeo.

        :return: The country_iso_code of this ExtendedMessageOpenEventInformationGeo.
        :rtype: str
        """
        return self._country_iso_code

    @country_iso_code.setter
    def country_iso_code(self, country_iso_code):
        """
        Sets the country_iso_code of this ExtendedMessageOpenEventInformationGeo.

        :param country_iso_code: The country_iso_code of this ExtendedMessageOpenEventInformationGeo.
        :type: str
        """

        self._country_iso_code = country_iso_code

    @property
    def country(self):
        """
        Gets the country of this ExtendedMessageOpenEventInformationGeo.

        :return: The country of this ExtendedMessageOpenEventInformationGeo.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this ExtendedMessageOpenEventInformationGeo.

        :param country: The country of this ExtendedMessageOpenEventInformationGeo.
        :type: str
        """

        self._country = country

    @property
    def region_iso_code(self):
        """
        Gets the region_iso_code of this ExtendedMessageOpenEventInformationGeo.

        :return: The region_iso_code of this ExtendedMessageOpenEventInformationGeo.
        :rtype: str
        """
        return self._region_iso_code

    @region_iso_code.setter
    def region_iso_code(self, region_iso_code):
        """
        Sets the region_iso_code of this ExtendedMessageOpenEventInformationGeo.

        :param region_iso_code: The region_iso_code of this ExtendedMessageOpenEventInformationGeo.
        :type: str
        """

        self._region_iso_code = region_iso_code

    @property
    def region(self):
        """
        Gets the region of this ExtendedMessageOpenEventInformationGeo.

        :return: The region of this ExtendedMessageOpenEventInformationGeo.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        Sets the region of this ExtendedMessageOpenEventInformationGeo.

        :param region: The region of this ExtendedMessageOpenEventInformationGeo.
        :type: str
        """

        self._region = region

    @property
    def city(self):
        """
        Gets the city of this ExtendedMessageOpenEventInformationGeo.

        :return: The city of this ExtendedMessageOpenEventInformationGeo.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this ExtendedMessageOpenEventInformationGeo.

        :param city: The city of this ExtendedMessageOpenEventInformationGeo.
        :type: str
        """

        self._city = city

    @property
    def zip(self):
        """
        Gets the zip of this ExtendedMessageOpenEventInformationGeo.

        :return: The zip of this ExtendedMessageOpenEventInformationGeo.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """
        Sets the zip of this ExtendedMessageOpenEventInformationGeo.

        :param zip: The zip of this ExtendedMessageOpenEventInformationGeo.
        :type: str
        """

        self._zip = zip

    @property
    def coords(self):
        """
        Gets the coords of this ExtendedMessageOpenEventInformationGeo.

        :return: The coords of this ExtendedMessageOpenEventInformationGeo.
        :rtype: str
        """
        return self._coords

    @coords.setter
    def coords(self, coords):
        """
        Sets the coords of this ExtendedMessageOpenEventInformationGeo.

        :param coords: The coords of this ExtendedMessageOpenEventInformationGeo.
        :type: str
        """

        self._coords = coords

    @property
    def ip(self):
        """
        Gets the ip of this ExtendedMessageOpenEventInformationGeo.

        :return: The ip of this ExtendedMessageOpenEventInformationGeo.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """
        Sets the ip of this ExtendedMessageOpenEventInformationGeo.

        :param ip: The ip of this ExtendedMessageOpenEventInformationGeo.
        :type: str
        """

        self._ip = ip

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ExtendedMessageOpenEventInformationGeo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
