# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EmailWithTemplateRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, template_id=None, template_model=None, to=None, _from=None, bcc=None, reply_to=None, track_links=None, track_opens=None, inline_css=True):
        """
        EmailWithTemplateRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'template_id': 'int',
            'template_model': 'object',
            'to': 'str',
            '_from': 'str',
            'bcc': 'str',
            'reply_to': 'str',
            'track_links': 'str',
            'track_opens': 'bool',
            'inline_css': 'bool'
        }

        self.attribute_map = {
            'template_id': 'TemplateId',
            'template_model': 'TemplateModel',
            'to': 'To',
            '_from': 'From',
            'bcc': 'Bcc',
            'reply_to': 'ReplyTo',
            'track_links': 'TrackLinks',
            'track_opens': 'TrackOpens',
            'inline_css': 'InlineCss'
        }

        self._template_id = None
        self._template_model = None
        self._to = None
        self.__from = None
        self._bcc = None
        self._reply_to = None
        self._track_links = None
        self._track_opens = None
        self._inline_css = None

        # TODO: let required properties as mandatory parameter in the constructor.
        #       - to check if required property is not None (e.g. by calling setter)
        #       - ApiClient.__deserialize_model has to be adapted as well
        if template_id is not None:
          self.template_id = template_id
        if template_model is not None:
          self.template_model = template_model
        if to is not None:
          self.to = to
        if _from is not None:
          self._from = _from
        if bcc is not None:
          self.bcc = bcc
        if reply_to is not None:
          self.reply_to = reply_to
        if track_links is not None:
          self.track_links = track_links
        if track_opens is not None:
          self.track_opens = track_opens
        if inline_css is not None:
          self.inline_css = inline_css

    @property
    def template_id(self):
        """
        Gets the template_id of this EmailWithTemplateRequest.

        :return: The template_id of this EmailWithTemplateRequest.
        :rtype: int
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """
        Sets the template_id of this EmailWithTemplateRequest.

        :param template_id: The template_id of this EmailWithTemplateRequest.
        :type: int
        """

        self._template_id = template_id

    @property
    def template_model(self):
        """
        Gets the template_model of this EmailWithTemplateRequest.

        :return: The template_model of this EmailWithTemplateRequest.
        :rtype: object
        """
        return self._template_model

    @template_model.setter
    def template_model(self, template_model):
        """
        Sets the template_model of this EmailWithTemplateRequest.

        :param template_model: The template_model of this EmailWithTemplateRequest.
        :type: object
        """

        self._template_model = template_model

    @property
    def to(self):
        """
        Gets the to of this EmailWithTemplateRequest.

        :return: The to of this EmailWithTemplateRequest.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """
        Sets the to of this EmailWithTemplateRequest.

        :param to: The to of this EmailWithTemplateRequest.
        :type: str
        """

        self._to = to

    @property
    def _from(self):
        """
        Gets the _from of this EmailWithTemplateRequest.

        :return: The _from of this EmailWithTemplateRequest.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """
        Sets the _from of this EmailWithTemplateRequest.

        :param _from: The _from of this EmailWithTemplateRequest.
        :type: str
        """

        self.__from = _from

    @property
    def bcc(self):
        """
        Gets the bcc of this EmailWithTemplateRequest.

        :return: The bcc of this EmailWithTemplateRequest.
        :rtype: str
        """
        return self._bcc

    @bcc.setter
    def bcc(self, bcc):
        """
        Sets the bcc of this EmailWithTemplateRequest.

        :param bcc: The bcc of this EmailWithTemplateRequest.
        :type: str
        """

        self._bcc = bcc

    @property
    def reply_to(self):
        """
        Gets the reply_to of this EmailWithTemplateRequest.

        :return: The reply_to of this EmailWithTemplateRequest.
        :rtype: str
        """
        return self._reply_to

    @reply_to.setter
    def reply_to(self, reply_to):
        """
        Sets the reply_to of this EmailWithTemplateRequest.

        :param reply_to: The reply_to of this EmailWithTemplateRequest.
        :type: str
        """

        self._reply_to = reply_to

    @property
    def track_links(self):
        """
        Gets the track_links of this EmailWithTemplateRequest.
        Replace links in content to enable \"click tracking\" stats. Default is 'null', which uses the server's LinkTracking setting'.

        :return: The track_links of this EmailWithTemplateRequest.
        :rtype: str
        """
        return self._track_links

    @track_links.setter
    def track_links(self, track_links):
        """
        Sets the track_links of this EmailWithTemplateRequest.
        Replace links in content to enable \"click tracking\" stats. Default is 'null', which uses the server's LinkTracking setting'.

        :param track_links: The track_links of this EmailWithTemplateRequest.
        :type: str
        """
        allowed_values = ["None", "HtmlAndText", "HtmlOnly", "TextOnly"]
        if track_links not in allowed_values:
            raise ValueError(
                "Invalid value for `track_links` ({0}), must be one of {1}"
                .format(track_links, allowed_values)
            )

        self._track_links = track_links

    @property
    def track_opens(self):
        """
        Gets the track_opens of this EmailWithTemplateRequest.
        Activate open tracking for this email.

        :return: The track_opens of this EmailWithTemplateRequest.
        :rtype: bool
        """
        return self._track_opens

    @track_opens.setter
    def track_opens(self, track_opens):
        """
        Sets the track_opens of this EmailWithTemplateRequest.
        Activate open tracking for this email.

        :param track_opens: The track_opens of this EmailWithTemplateRequest.
        :type: bool
        """

        self._track_opens = track_opens

    @property
    def inline_css(self):
        """
        Gets the inline_css of this EmailWithTemplateRequest.

        :return: The inline_css of this EmailWithTemplateRequest.
        :rtype: bool
        """
        return self._inline_css

    @inline_css.setter
    def inline_css(self, inline_css):
        """
        Sets the inline_css of this EmailWithTemplateRequest.

        :param inline_css: The inline_css of this EmailWithTemplateRequest.
        :type: bool
        """

        self._inline_css = inline_css

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EmailWithTemplateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
