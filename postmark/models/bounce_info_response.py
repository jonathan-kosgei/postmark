# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BounceInfoResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, type=None, type_code=None, name=None, tag=None, message_id=None, description=None, details=None, email=None, bounced_at=None, dump_available=None, inactive=None, can_activate=None, subject=None, content=None):
        """
        BounceInfoResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'type': 'str',
            'type_code': 'int',
            'name': 'str',
            'tag': 'str',
            'message_id': 'str',
            'description': 'str',
            'details': 'str',
            'email': 'str',
            'bounced_at': 'datetime',
            'dump_available': 'bool',
            'inactive': 'bool',
            'can_activate': 'bool',
            'subject': 'str',
            'content': 'str'
        }

        self.attribute_map = {
            'id': 'ID',
            'type': 'Type',
            'type_code': 'TypeCode',
            'name': 'Name',
            'tag': 'Tag',
            'message_id': 'MessageID',
            'description': 'Description',
            'details': 'Details',
            'email': 'Email',
            'bounced_at': 'BouncedAt',
            'dump_available': 'DumpAvailable',
            'inactive': 'Inactive',
            'can_activate': 'CanActivate',
            'subject': 'Subject',
            'content': 'Content'
        }

        self._id = None
        self._type = None
        self._type_code = None
        self._name = None
        self._tag = None
        self._message_id = None
        self._description = None
        self._details = None
        self._email = None
        self._bounced_at = None
        self._dump_available = None
        self._inactive = None
        self._can_activate = None
        self._subject = None
        self._content = None

        # TODO: let required properties as mandatory parameter in the constructor.
        #       - to check if required property is not None (e.g. by calling setter)
        #       - ApiClient.__deserialize_model has to be adapted as well
        if id is not None:
          self.id = id
        if type is not None:
          self.type = type
        if type_code is not None:
          self.type_code = type_code
        if name is not None:
          self.name = name
        if tag is not None:
          self.tag = tag
        if message_id is not None:
          self.message_id = message_id
        if description is not None:
          self.description = description
        if details is not None:
          self.details = details
        if email is not None:
          self.email = email
        if bounced_at is not None:
          self.bounced_at = bounced_at
        if dump_available is not None:
          self.dump_available = dump_available
        if inactive is not None:
          self.inactive = inactive
        if can_activate is not None:
          self.can_activate = can_activate
        if subject is not None:
          self.subject = subject
        if content is not None:
          self.content = content

    @property
    def id(self):
        """
        Gets the id of this BounceInfoResponse.

        :return: The id of this BounceInfoResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this BounceInfoResponse.

        :param id: The id of this BounceInfoResponse.
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """
        Gets the type of this BounceInfoResponse.

        :return: The type of this BounceInfoResponse.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this BounceInfoResponse.

        :param type: The type of this BounceInfoResponse.
        :type: str
        """

        self._type = type

    @property
    def type_code(self):
        """
        Gets the type_code of this BounceInfoResponse.

        :return: The type_code of this BounceInfoResponse.
        :rtype: int
        """
        return self._type_code

    @type_code.setter
    def type_code(self, type_code):
        """
        Sets the type_code of this BounceInfoResponse.

        :param type_code: The type_code of this BounceInfoResponse.
        :type: int
        """

        self._type_code = type_code

    @property
    def name(self):
        """
        Gets the name of this BounceInfoResponse.

        :return: The name of this BounceInfoResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this BounceInfoResponse.

        :param name: The name of this BounceInfoResponse.
        :type: str
        """

        self._name = name

    @property
    def tag(self):
        """
        Gets the tag of this BounceInfoResponse.

        :return: The tag of this BounceInfoResponse.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """
        Sets the tag of this BounceInfoResponse.

        :param tag: The tag of this BounceInfoResponse.
        :type: str
        """

        self._tag = tag

    @property
    def message_id(self):
        """
        Gets the message_id of this BounceInfoResponse.

        :return: The message_id of this BounceInfoResponse.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """
        Sets the message_id of this BounceInfoResponse.

        :param message_id: The message_id of this BounceInfoResponse.
        :type: str
        """

        self._message_id = message_id

    @property
    def description(self):
        """
        Gets the description of this BounceInfoResponse.

        :return: The description of this BounceInfoResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this BounceInfoResponse.

        :param description: The description of this BounceInfoResponse.
        :type: str
        """

        self._description = description

    @property
    def details(self):
        """
        Gets the details of this BounceInfoResponse.

        :return: The details of this BounceInfoResponse.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """
        Sets the details of this BounceInfoResponse.

        :param details: The details of this BounceInfoResponse.
        :type: str
        """

        self._details = details

    @property
    def email(self):
        """
        Gets the email of this BounceInfoResponse.

        :return: The email of this BounceInfoResponse.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this BounceInfoResponse.

        :param email: The email of this BounceInfoResponse.
        :type: str
        """

        self._email = email

    @property
    def bounced_at(self):
        """
        Gets the bounced_at of this BounceInfoResponse.

        :return: The bounced_at of this BounceInfoResponse.
        :rtype: datetime
        """
        return self._bounced_at

    @bounced_at.setter
    def bounced_at(self, bounced_at):
        """
        Sets the bounced_at of this BounceInfoResponse.

        :param bounced_at: The bounced_at of this BounceInfoResponse.
        :type: datetime
        """

        self._bounced_at = bounced_at

    @property
    def dump_available(self):
        """
        Gets the dump_available of this BounceInfoResponse.

        :return: The dump_available of this BounceInfoResponse.
        :rtype: bool
        """
        return self._dump_available

    @dump_available.setter
    def dump_available(self, dump_available):
        """
        Sets the dump_available of this BounceInfoResponse.

        :param dump_available: The dump_available of this BounceInfoResponse.
        :type: bool
        """

        self._dump_available = dump_available

    @property
    def inactive(self):
        """
        Gets the inactive of this BounceInfoResponse.

        :return: The inactive of this BounceInfoResponse.
        :rtype: bool
        """
        return self._inactive

    @inactive.setter
    def inactive(self, inactive):
        """
        Sets the inactive of this BounceInfoResponse.

        :param inactive: The inactive of this BounceInfoResponse.
        :type: bool
        """

        self._inactive = inactive

    @property
    def can_activate(self):
        """
        Gets the can_activate of this BounceInfoResponse.

        :return: The can_activate of this BounceInfoResponse.
        :rtype: bool
        """
        return self._can_activate

    @can_activate.setter
    def can_activate(self, can_activate):
        """
        Sets the can_activate of this BounceInfoResponse.

        :param can_activate: The can_activate of this BounceInfoResponse.
        :type: bool
        """

        self._can_activate = can_activate

    @property
    def subject(self):
        """
        Gets the subject of this BounceInfoResponse.

        :return: The subject of this BounceInfoResponse.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this BounceInfoResponse.

        :param subject: The subject of this BounceInfoResponse.
        :type: str
        """

        self._subject = subject

    @property
    def content(self):
        """
        Gets the content of this BounceInfoResponse.

        :return: The content of this BounceInfoResponse.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """
        Sets the content of this BounceInfoResponse.

        :param content: The content of this BounceInfoResponse.
        :type: str
        """

        self._content = content

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BounceInfoResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
