# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class OutboundOverviewStatsResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, sent=None, bounced=None, smtpapi_errors=None, bounce_rate=None, spam_complaints=None, spam_complaints_rate=None, opens=None, unique_opens=None, tracked=None, with_open_tracking=None, with_link_tracking=None, total_clicks=None, unique_links_clicked=None, total_tracked_links_sent=None, with_client_recorded=None, with_platform_recorded=None, with_read_time_recorded=None):
        """
        OutboundOverviewStatsResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'sent': 'int',
            'bounced': 'int',
            'smtpapi_errors': 'int',
            'bounce_rate': 'int',
            'spam_complaints': 'int',
            'spam_complaints_rate': 'int',
            'opens': 'int',
            'unique_opens': 'int',
            'tracked': 'int',
            'with_open_tracking': 'int',
            'with_link_tracking': 'int',
            'total_clicks': 'int',
            'unique_links_clicked': 'int',
            'total_tracked_links_sent': 'int',
            'with_client_recorded': 'int',
            'with_platform_recorded': 'int',
            'with_read_time_recorded': 'int'
        }

        self.attribute_map = {
            'sent': 'Sent',
            'bounced': 'Bounced',
            'smtpapi_errors': 'SMTPAPIErrors',
            'bounce_rate': 'BounceRate',
            'spam_complaints': 'SpamComplaints',
            'spam_complaints_rate': 'SpamComplaintsRate',
            'opens': 'Opens',
            'unique_opens': 'UniqueOpens',
            'tracked': 'Tracked',
            'with_open_tracking': 'WithOpenTracking',
            'with_link_tracking': 'WithLinkTracking',
            'total_clicks': 'TotalClicks',
            'unique_links_clicked': 'UniqueLinksClicked',
            'total_tracked_links_sent': 'TotalTrackedLinksSent',
            'with_client_recorded': 'WithClientRecorded',
            'with_platform_recorded': 'WithPlatformRecorded',
            'with_read_time_recorded': 'WithReadTimeRecorded'
        }

        self._sent = None
        self._bounced = None
        self._smtpapi_errors = None
        self._bounce_rate = None
        self._spam_complaints = None
        self._spam_complaints_rate = None
        self._opens = None
        self._unique_opens = None
        self._tracked = None
        self._with_open_tracking = None
        self._with_link_tracking = None
        self._total_clicks = None
        self._unique_links_clicked = None
        self._total_tracked_links_sent = None
        self._with_client_recorded = None
        self._with_platform_recorded = None
        self._with_read_time_recorded = None

        # TODO: let required properties as mandatory parameter in the constructor.
        #       - to check if required property is not None (e.g. by calling setter)
        #       - ApiClient.__deserialize_model has to be adapted as well
        if sent is not None:
          self.sent = sent
        if bounced is not None:
          self.bounced = bounced
        if smtpapi_errors is not None:
          self.smtpapi_errors = smtpapi_errors
        if bounce_rate is not None:
          self.bounce_rate = bounce_rate
        if spam_complaints is not None:
          self.spam_complaints = spam_complaints
        if spam_complaints_rate is not None:
          self.spam_complaints_rate = spam_complaints_rate
        if opens is not None:
          self.opens = opens
        if unique_opens is not None:
          self.unique_opens = unique_opens
        if tracked is not None:
          self.tracked = tracked
        if with_open_tracking is not None:
          self.with_open_tracking = with_open_tracking
        if with_link_tracking is not None:
          self.with_link_tracking = with_link_tracking
        if total_clicks is not None:
          self.total_clicks = total_clicks
        if unique_links_clicked is not None:
          self.unique_links_clicked = unique_links_clicked
        if total_tracked_links_sent is not None:
          self.total_tracked_links_sent = total_tracked_links_sent
        if with_client_recorded is not None:
          self.with_client_recorded = with_client_recorded
        if with_platform_recorded is not None:
          self.with_platform_recorded = with_platform_recorded
        if with_read_time_recorded is not None:
          self.with_read_time_recorded = with_read_time_recorded

    @property
    def sent(self):
        """
        Gets the sent of this OutboundOverviewStatsResponse.

        :return: The sent of this OutboundOverviewStatsResponse.
        :rtype: int
        """
        return self._sent

    @sent.setter
    def sent(self, sent):
        """
        Sets the sent of this OutboundOverviewStatsResponse.

        :param sent: The sent of this OutboundOverviewStatsResponse.
        :type: int
        """

        self._sent = sent

    @property
    def bounced(self):
        """
        Gets the bounced of this OutboundOverviewStatsResponse.

        :return: The bounced of this OutboundOverviewStatsResponse.
        :rtype: int
        """
        return self._bounced

    @bounced.setter
    def bounced(self, bounced):
        """
        Sets the bounced of this OutboundOverviewStatsResponse.

        :param bounced: The bounced of this OutboundOverviewStatsResponse.
        :type: int
        """

        self._bounced = bounced

    @property
    def smtpapi_errors(self):
        """
        Gets the smtpapi_errors of this OutboundOverviewStatsResponse.

        :return: The smtpapi_errors of this OutboundOverviewStatsResponse.
        :rtype: int
        """
        return self._smtpapi_errors

    @smtpapi_errors.setter
    def smtpapi_errors(self, smtpapi_errors):
        """
        Sets the smtpapi_errors of this OutboundOverviewStatsResponse.

        :param smtpapi_errors: The smtpapi_errors of this OutboundOverviewStatsResponse.
        :type: int
        """

        self._smtpapi_errors = smtpapi_errors

    @property
    def bounce_rate(self):
        """
        Gets the bounce_rate of this OutboundOverviewStatsResponse.

        :return: The bounce_rate of this OutboundOverviewStatsResponse.
        :rtype: int
        """
        return self._bounce_rate

    @bounce_rate.setter
    def bounce_rate(self, bounce_rate):
        """
        Sets the bounce_rate of this OutboundOverviewStatsResponse.

        :param bounce_rate: The bounce_rate of this OutboundOverviewStatsResponse.
        :type: int
        """

        self._bounce_rate = bounce_rate

    @property
    def spam_complaints(self):
        """
        Gets the spam_complaints of this OutboundOverviewStatsResponse.

        :return: The spam_complaints of this OutboundOverviewStatsResponse.
        :rtype: int
        """
        return self._spam_complaints

    @spam_complaints.setter
    def spam_complaints(self, spam_complaints):
        """
        Sets the spam_complaints of this OutboundOverviewStatsResponse.

        :param spam_complaints: The spam_complaints of this OutboundOverviewStatsResponse.
        :type: int
        """

        self._spam_complaints = spam_complaints

    @property
    def spam_complaints_rate(self):
        """
        Gets the spam_complaints_rate of this OutboundOverviewStatsResponse.

        :return: The spam_complaints_rate of this OutboundOverviewStatsResponse.
        :rtype: int
        """
        return self._spam_complaints_rate

    @spam_complaints_rate.setter
    def spam_complaints_rate(self, spam_complaints_rate):
        """
        Sets the spam_complaints_rate of this OutboundOverviewStatsResponse.

        :param spam_complaints_rate: The spam_complaints_rate of this OutboundOverviewStatsResponse.
        :type: int
        """

        self._spam_complaints_rate = spam_complaints_rate

    @property
    def opens(self):
        """
        Gets the opens of this OutboundOverviewStatsResponse.

        :return: The opens of this OutboundOverviewStatsResponse.
        :rtype: int
        """
        return self._opens

    @opens.setter
    def opens(self, opens):
        """
        Sets the opens of this OutboundOverviewStatsResponse.

        :param opens: The opens of this OutboundOverviewStatsResponse.
        :type: int
        """

        self._opens = opens

    @property
    def unique_opens(self):
        """
        Gets the unique_opens of this OutboundOverviewStatsResponse.

        :return: The unique_opens of this OutboundOverviewStatsResponse.
        :rtype: int
        """
        return self._unique_opens

    @unique_opens.setter
    def unique_opens(self, unique_opens):
        """
        Sets the unique_opens of this OutboundOverviewStatsResponse.

        :param unique_opens: The unique_opens of this OutboundOverviewStatsResponse.
        :type: int
        """

        self._unique_opens = unique_opens

    @property
    def tracked(self):
        """
        Gets the tracked of this OutboundOverviewStatsResponse.

        :return: The tracked of this OutboundOverviewStatsResponse.
        :rtype: int
        """
        return self._tracked

    @tracked.setter
    def tracked(self, tracked):
        """
        Sets the tracked of this OutboundOverviewStatsResponse.

        :param tracked: The tracked of this OutboundOverviewStatsResponse.
        :type: int
        """

        self._tracked = tracked

    @property
    def with_open_tracking(self):
        """
        Gets the with_open_tracking of this OutboundOverviewStatsResponse.

        :return: The with_open_tracking of this OutboundOverviewStatsResponse.
        :rtype: int
        """
        return self._with_open_tracking

    @with_open_tracking.setter
    def with_open_tracking(self, with_open_tracking):
        """
        Sets the with_open_tracking of this OutboundOverviewStatsResponse.

        :param with_open_tracking: The with_open_tracking of this OutboundOverviewStatsResponse.
        :type: int
        """

        self._with_open_tracking = with_open_tracking

    @property
    def with_link_tracking(self):
        """
        Gets the with_link_tracking of this OutboundOverviewStatsResponse.

        :return: The with_link_tracking of this OutboundOverviewStatsResponse.
        :rtype: int
        """
        return self._with_link_tracking

    @with_link_tracking.setter
    def with_link_tracking(self, with_link_tracking):
        """
        Sets the with_link_tracking of this OutboundOverviewStatsResponse.

        :param with_link_tracking: The with_link_tracking of this OutboundOverviewStatsResponse.
        :type: int
        """

        self._with_link_tracking = with_link_tracking

    @property
    def total_clicks(self):
        """
        Gets the total_clicks of this OutboundOverviewStatsResponse.

        :return: The total_clicks of this OutboundOverviewStatsResponse.
        :rtype: int
        """
        return self._total_clicks

    @total_clicks.setter
    def total_clicks(self, total_clicks):
        """
        Sets the total_clicks of this OutboundOverviewStatsResponse.

        :param total_clicks: The total_clicks of this OutboundOverviewStatsResponse.
        :type: int
        """

        self._total_clicks = total_clicks

    @property
    def unique_links_clicked(self):
        """
        Gets the unique_links_clicked of this OutboundOverviewStatsResponse.

        :return: The unique_links_clicked of this OutboundOverviewStatsResponse.
        :rtype: int
        """
        return self._unique_links_clicked

    @unique_links_clicked.setter
    def unique_links_clicked(self, unique_links_clicked):
        """
        Sets the unique_links_clicked of this OutboundOverviewStatsResponse.

        :param unique_links_clicked: The unique_links_clicked of this OutboundOverviewStatsResponse.
        :type: int
        """

        self._unique_links_clicked = unique_links_clicked

    @property
    def total_tracked_links_sent(self):
        """
        Gets the total_tracked_links_sent of this OutboundOverviewStatsResponse.

        :return: The total_tracked_links_sent of this OutboundOverviewStatsResponse.
        :rtype: int
        """
        return self._total_tracked_links_sent

    @total_tracked_links_sent.setter
    def total_tracked_links_sent(self, total_tracked_links_sent):
        """
        Sets the total_tracked_links_sent of this OutboundOverviewStatsResponse.

        :param total_tracked_links_sent: The total_tracked_links_sent of this OutboundOverviewStatsResponse.
        :type: int
        """

        self._total_tracked_links_sent = total_tracked_links_sent

    @property
    def with_client_recorded(self):
        """
        Gets the with_client_recorded of this OutboundOverviewStatsResponse.

        :return: The with_client_recorded of this OutboundOverviewStatsResponse.
        :rtype: int
        """
        return self._with_client_recorded

    @with_client_recorded.setter
    def with_client_recorded(self, with_client_recorded):
        """
        Sets the with_client_recorded of this OutboundOverviewStatsResponse.

        :param with_client_recorded: The with_client_recorded of this OutboundOverviewStatsResponse.
        :type: int
        """

        self._with_client_recorded = with_client_recorded

    @property
    def with_platform_recorded(self):
        """
        Gets the with_platform_recorded of this OutboundOverviewStatsResponse.

        :return: The with_platform_recorded of this OutboundOverviewStatsResponse.
        :rtype: int
        """
        return self._with_platform_recorded

    @with_platform_recorded.setter
    def with_platform_recorded(self, with_platform_recorded):
        """
        Sets the with_platform_recorded of this OutboundOverviewStatsResponse.

        :param with_platform_recorded: The with_platform_recorded of this OutboundOverviewStatsResponse.
        :type: int
        """

        self._with_platform_recorded = with_platform_recorded

    @property
    def with_read_time_recorded(self):
        """
        Gets the with_read_time_recorded of this OutboundOverviewStatsResponse.

        :return: The with_read_time_recorded of this OutboundOverviewStatsResponse.
        :rtype: int
        """
        return self._with_read_time_recorded

    @with_read_time_recorded.setter
    def with_read_time_recorded(self, with_read_time_recorded):
        """
        Sets the with_read_time_recorded of this OutboundOverviewStatsResponse.

        :param with_read_time_recorded: The with_read_time_recorded of this OutboundOverviewStatsResponse.
        :type: int
        """

        self._with_read_time_recorded = with_read_time_recorded

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, OutboundOverviewStatsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
