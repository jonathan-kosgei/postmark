# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CreateTemplateRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, subject=None, html_body=None, text_body=None):
        """
        CreateTemplateRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'subject': 'str',
            'html_body': 'str',
            'text_body': 'str'
        }

        self.attribute_map = {
            'name': 'Name',
            'subject': 'Subject',
            'html_body': 'HtmlBody',
            'text_body': 'TextBody'
        }

        self._name = None
        self._subject = None
        self._html_body = None
        self._text_body = None

        # TODO: let required properties as mandatory parameter in the constructor.
        #       - to check if required property is not None (e.g. by calling setter)
        #       - ApiClient.__deserialize_model has to be adapted as well
        if name is not None:
          self.name = name
        if subject is not None:
          self.subject = subject
        if html_body is not None:
          self.html_body = html_body
        if text_body is not None:
          self.text_body = text_body

    @property
    def name(self):
        """
        Gets the name of this CreateTemplateRequest.
        The friendly display name for the template.

        :return: The name of this CreateTemplateRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CreateTemplateRequest.
        The friendly display name for the template.

        :param name: The name of this CreateTemplateRequest.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def subject(self):
        """
        Gets the subject of this CreateTemplateRequest.
        The Subject template definition for this Template.

        :return: The subject of this CreateTemplateRequest.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this CreateTemplateRequest.
        The Subject template definition for this Template.

        :param subject: The subject of this CreateTemplateRequest.
        :type: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")

        self._subject = subject

    @property
    def html_body(self):
        """
        Gets the html_body of this CreateTemplateRequest.
        The HTML template definition for this Template.

        :return: The html_body of this CreateTemplateRequest.
        :rtype: str
        """
        return self._html_body

    @html_body.setter
    def html_body(self, html_body):
        """
        Sets the html_body of this CreateTemplateRequest.
        The HTML template definition for this Template.

        :param html_body: The html_body of this CreateTemplateRequest.
        :type: str
        """

        self._html_body = html_body

    @property
    def text_body(self):
        """
        Gets the text_body of this CreateTemplateRequest.
        The Text template definition for this Template.

        :return: The text_body of this CreateTemplateRequest.
        :rtype: str
        """
        return self._text_body

    @text_body.setter
    def text_body(self, text_body):
        """
        Sets the text_body of this CreateTemplateRequest.
        The Text template definition for this Template.

        :param text_body: The text_body of this CreateTemplateRequest.
        :type: str
        """

        self._text_body = text_body

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CreateTemplateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
