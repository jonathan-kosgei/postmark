# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ExtendedMessageOpenEventInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, first_open=None, client=None, os=None, platform=None, user_agent=None, read_seconds=None, geo=None, message_id=None, received_at=None, tag=None, recipient=None):
        """
        ExtendedMessageOpenEventInformation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'first_open': 'bool',
            'client': 'ExtendedMessageOpenEventInformationClient',
            'os': 'ExtendedMessageOpenEventInformationOS',
            'platform': 'str',
            'user_agent': 'str',
            'read_seconds': 'str',
            'geo': 'ExtendedMessageOpenEventInformationGeo',
            'message_id': 'str',
            'received_at': 'datetime',
            'tag': 'str',
            'recipient': 'str'
        }

        self.attribute_map = {
            'first_open': 'FirstOpen',
            'client': 'Client',
            'os': 'OS',
            'platform': 'Platform',
            'user_agent': 'UserAgent',
            'read_seconds': 'ReadSeconds',
            'geo': 'Geo',
            'message_id': 'MessageID',
            'received_at': 'ReceivedAt',
            'tag': 'Tag',
            'recipient': 'Recipient'
        }

        self._first_open = None
        self._client = None
        self._os = None
        self._platform = None
        self._user_agent = None
        self._read_seconds = None
        self._geo = None
        self._message_id = None
        self._received_at = None
        self._tag = None
        self._recipient = None

        # TODO: let required properties as mandatory parameter in the constructor.
        #       - to check if required property is not None (e.g. by calling setter)
        #       - ApiClient.__deserialize_model has to be adapted as well
        if first_open is not None:
          self.first_open = first_open
        if client is not None:
          self.client = client
        if os is not None:
          self.os = os
        if platform is not None:
          self.platform = platform
        if user_agent is not None:
          self.user_agent = user_agent
        if read_seconds is not None:
          self.read_seconds = read_seconds
        if geo is not None:
          self.geo = geo
        if message_id is not None:
          self.message_id = message_id
        if received_at is not None:
          self.received_at = received_at
        if tag is not None:
          self.tag = tag
        if recipient is not None:
          self.recipient = recipient

    @property
    def first_open(self):
        """
        Gets the first_open of this ExtendedMessageOpenEventInformation.

        :return: The first_open of this ExtendedMessageOpenEventInformation.
        :rtype: bool
        """
        return self._first_open

    @first_open.setter
    def first_open(self, first_open):
        """
        Sets the first_open of this ExtendedMessageOpenEventInformation.

        :param first_open: The first_open of this ExtendedMessageOpenEventInformation.
        :type: bool
        """

        self._first_open = first_open

    @property
    def client(self):
        """
        Gets the client of this ExtendedMessageOpenEventInformation.

        :return: The client of this ExtendedMessageOpenEventInformation.
        :rtype: ExtendedMessageOpenEventInformationClient
        """
        return self._client

    @client.setter
    def client(self, client):
        """
        Sets the client of this ExtendedMessageOpenEventInformation.

        :param client: The client of this ExtendedMessageOpenEventInformation.
        :type: ExtendedMessageOpenEventInformationClient
        """

        self._client = client

    @property
    def os(self):
        """
        Gets the os of this ExtendedMessageOpenEventInformation.

        :return: The os of this ExtendedMessageOpenEventInformation.
        :rtype: ExtendedMessageOpenEventInformationOS
        """
        return self._os

    @os.setter
    def os(self, os):
        """
        Sets the os of this ExtendedMessageOpenEventInformation.

        :param os: The os of this ExtendedMessageOpenEventInformation.
        :type: ExtendedMessageOpenEventInformationOS
        """

        self._os = os

    @property
    def platform(self):
        """
        Gets the platform of this ExtendedMessageOpenEventInformation.

        :return: The platform of this ExtendedMessageOpenEventInformation.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """
        Sets the platform of this ExtendedMessageOpenEventInformation.

        :param platform: The platform of this ExtendedMessageOpenEventInformation.
        :type: str
        """

        self._platform = platform

    @property
    def user_agent(self):
        """
        Gets the user_agent of this ExtendedMessageOpenEventInformation.

        :return: The user_agent of this ExtendedMessageOpenEventInformation.
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """
        Sets the user_agent of this ExtendedMessageOpenEventInformation.

        :param user_agent: The user_agent of this ExtendedMessageOpenEventInformation.
        :type: str
        """

        self._user_agent = user_agent

    @property
    def read_seconds(self):
        """
        Gets the read_seconds of this ExtendedMessageOpenEventInformation.

        :return: The read_seconds of this ExtendedMessageOpenEventInformation.
        :rtype: str
        """
        return self._read_seconds

    @read_seconds.setter
    def read_seconds(self, read_seconds):
        """
        Sets the read_seconds of this ExtendedMessageOpenEventInformation.

        :param read_seconds: The read_seconds of this ExtendedMessageOpenEventInformation.
        :type: str
        """

        self._read_seconds = read_seconds

    @property
    def geo(self):
        """
        Gets the geo of this ExtendedMessageOpenEventInformation.

        :return: The geo of this ExtendedMessageOpenEventInformation.
        :rtype: ExtendedMessageOpenEventInformationGeo
        """
        return self._geo

    @geo.setter
    def geo(self, geo):
        """
        Sets the geo of this ExtendedMessageOpenEventInformation.

        :param geo: The geo of this ExtendedMessageOpenEventInformation.
        :type: ExtendedMessageOpenEventInformationGeo
        """

        self._geo = geo

    @property
    def message_id(self):
        """
        Gets the message_id of this ExtendedMessageOpenEventInformation.

        :return: The message_id of this ExtendedMessageOpenEventInformation.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """
        Sets the message_id of this ExtendedMessageOpenEventInformation.

        :param message_id: The message_id of this ExtendedMessageOpenEventInformation.
        :type: str
        """

        self._message_id = message_id

    @property
    def received_at(self):
        """
        Gets the received_at of this ExtendedMessageOpenEventInformation.

        :return: The received_at of this ExtendedMessageOpenEventInformation.
        :rtype: datetime
        """
        return self._received_at

    @received_at.setter
    def received_at(self, received_at):
        """
        Sets the received_at of this ExtendedMessageOpenEventInformation.

        :param received_at: The received_at of this ExtendedMessageOpenEventInformation.
        :type: datetime
        """

        self._received_at = received_at

    @property
    def tag(self):
        """
        Gets the tag of this ExtendedMessageOpenEventInformation.

        :return: The tag of this ExtendedMessageOpenEventInformation.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """
        Sets the tag of this ExtendedMessageOpenEventInformation.

        :param tag: The tag of this ExtendedMessageOpenEventInformation.
        :type: str
        """

        self._tag = tag

    @property
    def recipient(self):
        """
        Gets the recipient of this ExtendedMessageOpenEventInformation.

        :return: The recipient of this ExtendedMessageOpenEventInformation.
        :rtype: str
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient):
        """
        Sets the recipient of this ExtendedMessageOpenEventInformation.

        :param recipient: The recipient of this ExtendedMessageOpenEventInformation.
        :type: str
        """

        self._recipient = recipient

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ExtendedMessageOpenEventInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
