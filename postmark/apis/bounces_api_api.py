# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class BouncesAPIApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def activate_bounce(self, x_postmark_server_token, bounceid, **kwargs):
        """
        Activate a bounce
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.activate_bounce(x_postmark_server_token, bounceid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param int bounceid: The ID of the Bounce to activate. (required)
        :return: BounceActivationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.activate_bounce_with_http_info(x_postmark_server_token, bounceid, **kwargs)
        else:
            (data) = self.activate_bounce_with_http_info(x_postmark_server_token, bounceid, **kwargs)
            return data

    def activate_bounce_with_http_info(self, x_postmark_server_token, bounceid, **kwargs):
        """
        Activate a bounce
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.activate_bounce_with_http_info(x_postmark_server_token, bounceid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param int bounceid: The ID of the Bounce to activate. (required)
        :return: BounceActivationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_postmark_server_token', 'bounceid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method activate_bounce" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_postmark_server_token' is set
        if ('x_postmark_server_token' not in params) or (params['x_postmark_server_token'] is None):
            raise ValueError("Missing the required parameter `x_postmark_server_token` when calling `activate_bounce`")
        # verify the required parameter 'bounceid' is set
        if ('bounceid' not in params) or (params['bounceid'] is None):
            raise ValueError("Missing the required parameter `bounceid` when calling `activate_bounce`")


        collection_formats = {}

        path_params = {}
        if 'bounceid' in params:
            path_params['bounceid'] = params['bounceid']

        query_params = {}

        header_params = {}
        if 'x_postmark_server_token' in params:
            header_params['X-Postmark-Server-Token'] = params['x_postmark_server_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/bounces/{bounceid}/activate', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='BounceActivationResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def bounces_bounceid_dump_get(self, x_postmark_server_token, bounceid, **kwargs):
        """
        Get bounce dump
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.bounces_bounceid_dump_get(x_postmark_server_token, bounceid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param int bounceid: The ID for the bounce dump to retrieve. (required)
        :return: BounceDumpResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.bounces_bounceid_dump_get_with_http_info(x_postmark_server_token, bounceid, **kwargs)
        else:
            (data) = self.bounces_bounceid_dump_get_with_http_info(x_postmark_server_token, bounceid, **kwargs)
            return data

    def bounces_bounceid_dump_get_with_http_info(self, x_postmark_server_token, bounceid, **kwargs):
        """
        Get bounce dump
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.bounces_bounceid_dump_get_with_http_info(x_postmark_server_token, bounceid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param int bounceid: The ID for the bounce dump to retrieve. (required)
        :return: BounceDumpResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_postmark_server_token', 'bounceid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bounces_bounceid_dump_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_postmark_server_token' is set
        if ('x_postmark_server_token' not in params) or (params['x_postmark_server_token'] is None):
            raise ValueError("Missing the required parameter `x_postmark_server_token` when calling `bounces_bounceid_dump_get`")
        # verify the required parameter 'bounceid' is set
        if ('bounceid' not in params) or (params['bounceid'] is None):
            raise ValueError("Missing the required parameter `bounceid` when calling `bounces_bounceid_dump_get`")


        collection_formats = {}

        path_params = {}
        if 'bounceid' in params:
            path_params['bounceid'] = params['bounceid']

        query_params = {}

        header_params = {}
        if 'x_postmark_server_token' in params:
            header_params['X-Postmark-Server-Token'] = params['x_postmark_server_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/bounces/{bounceid}/dump', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='BounceDumpResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_bounced_tags(self, x_postmark_server_token, **kwargs):
        """
        Get bounced tags
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_bounced_tags(x_postmark_server_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_bounced_tags_with_http_info(x_postmark_server_token, **kwargs)
        else:
            (data) = self.get_bounced_tags_with_http_info(x_postmark_server_token, **kwargs)
            return data

    def get_bounced_tags_with_http_info(self, x_postmark_server_token, **kwargs):
        """
        Get bounced tags
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_bounced_tags_with_http_info(x_postmark_server_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_postmark_server_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bounced_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_postmark_server_token' is set
        if ('x_postmark_server_token' not in params) or (params['x_postmark_server_token'] is None):
            raise ValueError("Missing the required parameter `x_postmark_server_token` when calling `get_bounced_tags`")


        collection_formats = {}

        path_params = {}

        query_params = {}

        header_params = {}
        if 'x_postmark_server_token' in params:
            header_params['X-Postmark-Server-Token'] = params['x_postmark_server_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/bounces/tags', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[str]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_bounces(self, x_postmark_server_token, count, offset, **kwargs):
        """
        Get bounces
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_bounces(x_postmark_server_token, count, offset, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param int count: Number of bounces to return per request. Max 500. (required)
        :param int offset: Number of bounces to skip. (required)
        :param str type: Filter by type of bounce
        :param bool inactive: Filter by emails that were deactivated by Postmark due to the bounce. Set to true or false. If this isn't specified it will return both active and inactive.
        :param str email_filter: Filter by email address
        :param str message_id: Filter by messageID
        :param str tag: Filter by tag
        :param date todate: Filter messages up to the date specified. e.g. `2014-02-01`
        :param date fromdate: Filter messages starting from the date specified. e.g. `2014-02-01`
        :return: BounceSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_bounces_with_http_info(x_postmark_server_token, count, offset, **kwargs)
        else:
            (data) = self.get_bounces_with_http_info(x_postmark_server_token, count, offset, **kwargs)
            return data

    def get_bounces_with_http_info(self, x_postmark_server_token, count, offset, **kwargs):
        """
        Get bounces
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_bounces_with_http_info(x_postmark_server_token, count, offset, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param int count: Number of bounces to return per request. Max 500. (required)
        :param int offset: Number of bounces to skip. (required)
        :param str type: Filter by type of bounce
        :param bool inactive: Filter by emails that were deactivated by Postmark due to the bounce. Set to true or false. If this isn't specified it will return both active and inactive.
        :param str email_filter: Filter by email address
        :param str message_id: Filter by messageID
        :param str tag: Filter by tag
        :param date todate: Filter messages up to the date specified. e.g. `2014-02-01`
        :param date fromdate: Filter messages starting from the date specified. e.g. `2014-02-01`
        :return: BounceSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_postmark_server_token', 'count', 'offset', 'type', 'inactive', 'email_filter', 'message_id', 'tag', 'todate', 'fromdate']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bounces" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_postmark_server_token' is set
        if ('x_postmark_server_token' not in params) or (params['x_postmark_server_token'] is None):
            raise ValueError("Missing the required parameter `x_postmark_server_token` when calling `get_bounces`")
        # verify the required parameter 'count' is set
        if ('count' not in params) or (params['count'] is None):
            raise ValueError("Missing the required parameter `count` when calling `get_bounces`")
        # verify the required parameter 'offset' is set
        if ('offset' not in params) or (params['offset'] is None):
            raise ValueError("Missing the required parameter `offset` when calling `get_bounces`")

        if 'count' in params and params['count'] > 500:
            raise ValueError("Invalid value for parameter `count` when calling `get_bounces`, must be a value less than or equal to `500`")

        collection_formats = {}

        path_params = {}

        query_params = {}
        if 'count' in params:
            query_params['count'] = params['count']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'type' in params:
            query_params['type'] = params['type']
        if 'inactive' in params:
            query_params['inactive'] = params['inactive']
        if 'email_filter' in params:
            query_params['emailFilter'] = params['email_filter']
        if 'message_id' in params:
            query_params['messageID'] = params['message_id']
        if 'tag' in params:
            query_params['tag'] = params['tag']
        if 'todate' in params:
            query_params['todate'] = params['todate']
        if 'fromdate' in params:
            query_params['fromdate'] = params['fromdate']

        header_params = {}
        if 'x_postmark_server_token' in params:
            header_params['X-Postmark-Server-Token'] = params['x_postmark_server_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/bounces', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='BounceSearchResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_delivery_stats(self, x_postmark_server_token, **kwargs):
        """
        Get delivery stats
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_delivery_stats(x_postmark_server_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :return: DeliveryStatsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_delivery_stats_with_http_info(x_postmark_server_token, **kwargs)
        else:
            (data) = self.get_delivery_stats_with_http_info(x_postmark_server_token, **kwargs)
            return data

    def get_delivery_stats_with_http_info(self, x_postmark_server_token, **kwargs):
        """
        Get delivery stats
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_delivery_stats_with_http_info(x_postmark_server_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :return: DeliveryStatsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_postmark_server_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_delivery_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_postmark_server_token' is set
        if ('x_postmark_server_token' not in params) or (params['x_postmark_server_token'] is None):
            raise ValueError("Missing the required parameter `x_postmark_server_token` when calling `get_delivery_stats`")


        collection_formats = {}

        path_params = {}

        query_params = {}

        header_params = {}
        if 'x_postmark_server_token' in params:
            header_params['X-Postmark-Server-Token'] = params['x_postmark_server_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/deliverystats', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeliveryStatsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_single_bounce(self, x_postmark_server_token, bounceid, **kwargs):
        """
        Get a single bounce
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_single_bounce(x_postmark_server_token, bounceid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param int bounceid: The ID of the bounce to retrieve. (required)
        :return: BounceInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_single_bounce_with_http_info(x_postmark_server_token, bounceid, **kwargs)
        else:
            (data) = self.get_single_bounce_with_http_info(x_postmark_server_token, bounceid, **kwargs)
            return data

    def get_single_bounce_with_http_info(self, x_postmark_server_token, bounceid, **kwargs):
        """
        Get a single bounce
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_single_bounce_with_http_info(x_postmark_server_token, bounceid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param int bounceid: The ID of the bounce to retrieve. (required)
        :return: BounceInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_postmark_server_token', 'bounceid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_single_bounce" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_postmark_server_token' is set
        if ('x_postmark_server_token' not in params) or (params['x_postmark_server_token'] is None):
            raise ValueError("Missing the required parameter `x_postmark_server_token` when calling `get_single_bounce`")
        # verify the required parameter 'bounceid' is set
        if ('bounceid' not in params) or (params['bounceid'] is None):
            raise ValueError("Missing the required parameter `bounceid` when calling `get_single_bounce`")


        collection_formats = {}

        path_params = {}
        if 'bounceid' in params:
            path_params['bounceid'] = params['bounceid']

        query_params = {}

        header_params = {}
        if 'x_postmark_server_token' in params:
            header_params['X-Postmark-Server-Token'] = params['x_postmark_server_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/bounces/{bounceid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='BounceInfoResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
