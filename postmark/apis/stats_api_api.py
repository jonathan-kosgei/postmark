# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class StatsAPIApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_bounce_counts(self, x_postmark_server_token, **kwargs):
        """
        Get bounce counts
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_bounce_counts(x_postmark_server_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str tag: Filter by tag
        :param date fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :param date todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_bounce_counts_with_http_info(x_postmark_server_token, **kwargs)
        else:
            (data) = self.get_bounce_counts_with_http_info(x_postmark_server_token, **kwargs)
            return data

    def get_bounce_counts_with_http_info(self, x_postmark_server_token, **kwargs):
        """
        Get bounce counts
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_bounce_counts_with_http_info(x_postmark_server_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str tag: Filter by tag
        :param date fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :param date todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_postmark_server_token', 'tag', 'fromdate', 'todate']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bounce_counts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_postmark_server_token' is set
        if ('x_postmark_server_token' not in params) or (params['x_postmark_server_token'] is None):
            raise ValueError("Missing the required parameter `x_postmark_server_token` when calling `get_bounce_counts`")


        collection_formats = {}

        path_params = {}

        query_params = {}
        if 'tag' in params:
            query_params['tag'] = params['tag']
        if 'fromdate' in params:
            query_params['fromdate'] = params['fromdate']
        if 'todate' in params:
            query_params['todate'] = params['todate']

        header_params = {}
        if 'x_postmark_server_token' in params:
            header_params['X-Postmark-Server-Token'] = params['x_postmark_server_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/stats/outbound/bounces', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse200',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_outbound_click_counts(self, x_postmark_server_token, **kwargs):
        """
        Get click counts
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_outbound_click_counts(x_postmark_server_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str tag: Filter by tag
        :param date fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :param date todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :return: DynamicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_outbound_click_counts_with_http_info(x_postmark_server_token, **kwargs)
        else:
            (data) = self.get_outbound_click_counts_with_http_info(x_postmark_server_token, **kwargs)
            return data

    def get_outbound_click_counts_with_http_info(self, x_postmark_server_token, **kwargs):
        """
        Get click counts
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_outbound_click_counts_with_http_info(x_postmark_server_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str tag: Filter by tag
        :param date fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :param date todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :return: DynamicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_postmark_server_token', 'tag', 'fromdate', 'todate']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_outbound_click_counts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_postmark_server_token' is set
        if ('x_postmark_server_token' not in params) or (params['x_postmark_server_token'] is None):
            raise ValueError("Missing the required parameter `x_postmark_server_token` when calling `get_outbound_click_counts`")


        collection_formats = {}

        path_params = {}

        query_params = {}
        if 'tag' in params:
            query_params['tag'] = params['tag']
        if 'fromdate' in params:
            query_params['fromdate'] = params['fromdate']
        if 'todate' in params:
            query_params['todate'] = params['todate']

        header_params = {}
        if 'x_postmark_server_token' in params:
            header_params['X-Postmark-Server-Token'] = params['x_postmark_server_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/stats/outbound/clicks', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DynamicResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_outbound_click_counts_by_browser_family(self, x_postmark_server_token, **kwargs):
        """
        Get browser usage by family
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_outbound_click_counts_by_browser_family(x_postmark_server_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str tag: Filter by tag
        :param date fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :param date todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_outbound_click_counts_by_browser_family_with_http_info(x_postmark_server_token, **kwargs)
        else:
            (data) = self.get_outbound_click_counts_by_browser_family_with_http_info(x_postmark_server_token, **kwargs)
            return data

    def get_outbound_click_counts_by_browser_family_with_http_info(self, x_postmark_server_token, **kwargs):
        """
        Get browser usage by family
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_outbound_click_counts_by_browser_family_with_http_info(x_postmark_server_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str tag: Filter by tag
        :param date fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :param date todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_postmark_server_token', 'tag', 'fromdate', 'todate']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_outbound_click_counts_by_browser_family" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_postmark_server_token' is set
        if ('x_postmark_server_token' not in params) or (params['x_postmark_server_token'] is None):
            raise ValueError("Missing the required parameter `x_postmark_server_token` when calling `get_outbound_click_counts_by_browser_family`")


        collection_formats = {}

        path_params = {}

        query_params = {}
        if 'tag' in params:
            query_params['tag'] = params['tag']
        if 'fromdate' in params:
            query_params['fromdate'] = params['fromdate']
        if 'todate' in params:
            query_params['todate'] = params['todate']

        header_params = {}
        if 'x_postmark_server_token' in params:
            header_params['X-Postmark-Server-Token'] = params['x_postmark_server_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/stats/outbound/clicks/browserfamilies', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='object',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_outbound_click_counts_by_location(self, x_postmark_server_token, **kwargs):
        """
        Get clicks by body location
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_outbound_click_counts_by_location(x_postmark_server_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str tag: Filter by tag
        :param date fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :param date todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :return: DynamicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_outbound_click_counts_by_location_with_http_info(x_postmark_server_token, **kwargs)
        else:
            (data) = self.get_outbound_click_counts_by_location_with_http_info(x_postmark_server_token, **kwargs)
            return data

    def get_outbound_click_counts_by_location_with_http_info(self, x_postmark_server_token, **kwargs):
        """
        Get clicks by body location
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_outbound_click_counts_by_location_with_http_info(x_postmark_server_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str tag: Filter by tag
        :param date fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :param date todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :return: DynamicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_postmark_server_token', 'tag', 'fromdate', 'todate']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_outbound_click_counts_by_location" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_postmark_server_token' is set
        if ('x_postmark_server_token' not in params) or (params['x_postmark_server_token'] is None):
            raise ValueError("Missing the required parameter `x_postmark_server_token` when calling `get_outbound_click_counts_by_location`")


        collection_formats = {}

        path_params = {}

        query_params = {}
        if 'tag' in params:
            query_params['tag'] = params['tag']
        if 'fromdate' in params:
            query_params['fromdate'] = params['fromdate']
        if 'todate' in params:
            query_params['todate'] = params['todate']

        header_params = {}
        if 'x_postmark_server_token' in params:
            header_params['X-Postmark-Server-Token'] = params['x_postmark_server_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/stats/outbound/clicks/location', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DynamicResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_outbound_click_counts_by_platform(self, x_postmark_server_token, **kwargs):
        """
        Get browser plaform usage
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_outbound_click_counts_by_platform(x_postmark_server_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str tag: Filter by tag
        :param date fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :param date todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :return: DynamicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_outbound_click_counts_by_platform_with_http_info(x_postmark_server_token, **kwargs)
        else:
            (data) = self.get_outbound_click_counts_by_platform_with_http_info(x_postmark_server_token, **kwargs)
            return data

    def get_outbound_click_counts_by_platform_with_http_info(self, x_postmark_server_token, **kwargs):
        """
        Get browser plaform usage
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_outbound_click_counts_by_platform_with_http_info(x_postmark_server_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str tag: Filter by tag
        :param date fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :param date todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :return: DynamicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_postmark_server_token', 'tag', 'fromdate', 'todate']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_outbound_click_counts_by_platform" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_postmark_server_token' is set
        if ('x_postmark_server_token' not in params) or (params['x_postmark_server_token'] is None):
            raise ValueError("Missing the required parameter `x_postmark_server_token` when calling `get_outbound_click_counts_by_platform`")


        collection_formats = {}

        path_params = {}

        query_params = {}
        if 'tag' in params:
            query_params['tag'] = params['tag']
        if 'fromdate' in params:
            query_params['fromdate'] = params['fromdate']
        if 'todate' in params:
            query_params['todate'] = params['todate']

        header_params = {}
        if 'x_postmark_server_token' in params:
            header_params['X-Postmark-Server-Token'] = params['x_postmark_server_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/stats/outbound/clicks/platforms', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DynamicResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_outbound_open_counts(self, x_postmark_server_token, **kwargs):
        """
        Get email open counts
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_outbound_open_counts(x_postmark_server_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str tag: Filter by tag
        :param date fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :param date todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_outbound_open_counts_with_http_info(x_postmark_server_token, **kwargs)
        else:
            (data) = self.get_outbound_open_counts_with_http_info(x_postmark_server_token, **kwargs)
            return data

    def get_outbound_open_counts_with_http_info(self, x_postmark_server_token, **kwargs):
        """
        Get email open counts
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_outbound_open_counts_with_http_info(x_postmark_server_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str tag: Filter by tag
        :param date fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :param date todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_postmark_server_token', 'tag', 'fromdate', 'todate']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_outbound_open_counts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_postmark_server_token' is set
        if ('x_postmark_server_token' not in params) or (params['x_postmark_server_token'] is None):
            raise ValueError("Missing the required parameter `x_postmark_server_token` when calling `get_outbound_open_counts`")


        collection_formats = {}

        path_params = {}

        query_params = {}
        if 'tag' in params:
            query_params['tag'] = params['tag']
        if 'fromdate' in params:
            query_params['fromdate'] = params['fromdate']
        if 'todate' in params:
            query_params['todate'] = params['todate']

        header_params = {}
        if 'x_postmark_server_token' in params:
            header_params['X-Postmark-Server-Token'] = params['x_postmark_server_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/stats/outbound/opens', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2003',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_outbound_open_counts_by_email_client(self, x_postmark_server_token, **kwargs):
        """
        Get email client usage
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_outbound_open_counts_by_email_client(x_postmark_server_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str tag: Filter by tag
        :param date fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :param date todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_outbound_open_counts_by_email_client_with_http_info(x_postmark_server_token, **kwargs)
        else:
            (data) = self.get_outbound_open_counts_by_email_client_with_http_info(x_postmark_server_token, **kwargs)
            return data

    def get_outbound_open_counts_by_email_client_with_http_info(self, x_postmark_server_token, **kwargs):
        """
        Get email client usage
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_outbound_open_counts_by_email_client_with_http_info(x_postmark_server_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str tag: Filter by tag
        :param date fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :param date todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_postmark_server_token', 'tag', 'fromdate', 'todate']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_outbound_open_counts_by_email_client" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_postmark_server_token' is set
        if ('x_postmark_server_token' not in params) or (params['x_postmark_server_token'] is None):
            raise ValueError("Missing the required parameter `x_postmark_server_token` when calling `get_outbound_open_counts_by_email_client`")


        collection_formats = {}

        path_params = {}

        query_params = {}
        if 'tag' in params:
            query_params['tag'] = params['tag']
        if 'fromdate' in params:
            query_params['fromdate'] = params['fromdate']
        if 'todate' in params:
            query_params['todate'] = params['todate']

        header_params = {}
        if 'x_postmark_server_token' in params:
            header_params['X-Postmark-Server-Token'] = params['x_postmark_server_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/stats/outbound/opens/emailclients', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2005',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_outbound_open_counts_by_platform(self, x_postmark_server_token, **kwargs):
        """
        Get email platform usage
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_outbound_open_counts_by_platform(x_postmark_server_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str tag: Filter by tag
        :param date fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :param date todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_outbound_open_counts_by_platform_with_http_info(x_postmark_server_token, **kwargs)
        else:
            (data) = self.get_outbound_open_counts_by_platform_with_http_info(x_postmark_server_token, **kwargs)
            return data

    def get_outbound_open_counts_by_platform_with_http_info(self, x_postmark_server_token, **kwargs):
        """
        Get email platform usage
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_outbound_open_counts_by_platform_with_http_info(x_postmark_server_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str tag: Filter by tag
        :param date fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :param date todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_postmark_server_token', 'tag', 'fromdate', 'todate']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_outbound_open_counts_by_platform" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_postmark_server_token' is set
        if ('x_postmark_server_token' not in params) or (params['x_postmark_server_token'] is None):
            raise ValueError("Missing the required parameter `x_postmark_server_token` when calling `get_outbound_open_counts_by_platform`")


        collection_formats = {}

        path_params = {}

        query_params = {}
        if 'tag' in params:
            query_params['tag'] = params['tag']
        if 'fromdate' in params:
            query_params['fromdate'] = params['fromdate']
        if 'todate' in params:
            query_params['todate'] = params['todate']

        header_params = {}
        if 'x_postmark_server_token' in params:
            header_params['X-Postmark-Server-Token'] = params['x_postmark_server_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/stats/outbound/opens/platforms', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2004',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_outbound_open_counts_by_reading_time(self, x_postmark_server_token, **kwargs):
        """
        Get email read times
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_outbound_open_counts_by_reading_time(x_postmark_server_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str tag: Filter by tag
        :param date fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :param date todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :return: DynamicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_outbound_open_counts_by_reading_time_with_http_info(x_postmark_server_token, **kwargs)
        else:
            (data) = self.get_outbound_open_counts_by_reading_time_with_http_info(x_postmark_server_token, **kwargs)
            return data

    def get_outbound_open_counts_by_reading_time_with_http_info(self, x_postmark_server_token, **kwargs):
        """
        Get email read times
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_outbound_open_counts_by_reading_time_with_http_info(x_postmark_server_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str tag: Filter by tag
        :param date fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :param date todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :return: DynamicResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_postmark_server_token', 'tag', 'fromdate', 'todate']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_outbound_open_counts_by_reading_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_postmark_server_token' is set
        if ('x_postmark_server_token' not in params) or (params['x_postmark_server_token'] is None):
            raise ValueError("Missing the required parameter `x_postmark_server_token` when calling `get_outbound_open_counts_by_reading_time`")


        collection_formats = {}

        path_params = {}

        query_params = {}
        if 'tag' in params:
            query_params['tag'] = params['tag']
        if 'fromdate' in params:
            query_params['fromdate'] = params['fromdate']
        if 'todate' in params:
            query_params['todate'] = params['todate']

        header_params = {}
        if 'x_postmark_server_token' in params:
            header_params['X-Postmark-Server-Token'] = params['x_postmark_server_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/stats/outbound/opens/readtimes', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DynamicResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_outbound_overview_statistics(self, x_postmark_server_token, **kwargs):
        """
        Get outbound overview
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_outbound_overview_statistics(x_postmark_server_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str tag: Filter by tag
        :param date fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :param date todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :return: OutboundOverviewStatsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_outbound_overview_statistics_with_http_info(x_postmark_server_token, **kwargs)
        else:
            (data) = self.get_outbound_overview_statistics_with_http_info(x_postmark_server_token, **kwargs)
            return data

    def get_outbound_overview_statistics_with_http_info(self, x_postmark_server_token, **kwargs):
        """
        Get outbound overview
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_outbound_overview_statistics_with_http_info(x_postmark_server_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str tag: Filter by tag
        :param date fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :param date todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :return: OutboundOverviewStatsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_postmark_server_token', 'tag', 'fromdate', 'todate']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_outbound_overview_statistics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_postmark_server_token' is set
        if ('x_postmark_server_token' not in params) or (params['x_postmark_server_token'] is None):
            raise ValueError("Missing the required parameter `x_postmark_server_token` when calling `get_outbound_overview_statistics`")


        collection_formats = {}

        path_params = {}

        query_params = {}
        if 'tag' in params:
            query_params['tag'] = params['tag']
        if 'fromdate' in params:
            query_params['fromdate'] = params['fromdate']
        if 'todate' in params:
            query_params['todate'] = params['todate']

        header_params = {}
        if 'x_postmark_server_token' in params:
            header_params['X-Postmark-Server-Token'] = params['x_postmark_server_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/stats/outbound', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='OutboundOverviewStatsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_sent_counts(self, x_postmark_server_token, **kwargs):
        """
        Get sent counts
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sent_counts(x_postmark_server_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str tag: Filter by tag
        :param date fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :param date todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :return: SentCountsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_sent_counts_with_http_info(x_postmark_server_token, **kwargs)
        else:
            (data) = self.get_sent_counts_with_http_info(x_postmark_server_token, **kwargs)
            return data

    def get_sent_counts_with_http_info(self, x_postmark_server_token, **kwargs):
        """
        Get sent counts
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sent_counts_with_http_info(x_postmark_server_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str tag: Filter by tag
        :param date fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :param date todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :return: SentCountsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_postmark_server_token', 'tag', 'fromdate', 'todate']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sent_counts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_postmark_server_token' is set
        if ('x_postmark_server_token' not in params) or (params['x_postmark_server_token'] is None):
            raise ValueError("Missing the required parameter `x_postmark_server_token` when calling `get_sent_counts`")


        collection_formats = {}

        path_params = {}

        query_params = {}
        if 'tag' in params:
            query_params['tag'] = params['tag']
        if 'fromdate' in params:
            query_params['fromdate'] = params['fromdate']
        if 'todate' in params:
            query_params['todate'] = params['todate']

        header_params = {}
        if 'x_postmark_server_token' in params:
            header_params['X-Postmark-Server-Token'] = params['x_postmark_server_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/stats/outbound/sends', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SentCountsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_spam_complaints(self, x_postmark_server_token, **kwargs):
        """
        Get spam complaints
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_spam_complaints(x_postmark_server_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str tag: Filter by tag
        :param date fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :param date todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_spam_complaints_with_http_info(x_postmark_server_token, **kwargs)
        else:
            (data) = self.get_spam_complaints_with_http_info(x_postmark_server_token, **kwargs)
            return data

    def get_spam_complaints_with_http_info(self, x_postmark_server_token, **kwargs):
        """
        Get spam complaints
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_spam_complaints_with_http_info(x_postmark_server_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str tag: Filter by tag
        :param date fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :param date todate: Filter stats up to the date specified. e.g. `2014-02-01`
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_postmark_server_token', 'tag', 'fromdate', 'todate']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_spam_complaints" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_postmark_server_token' is set
        if ('x_postmark_server_token' not in params) or (params['x_postmark_server_token'] is None):
            raise ValueError("Missing the required parameter `x_postmark_server_token` when calling `get_spam_complaints`")


        collection_formats = {}

        path_params = {}

        query_params = {}
        if 'tag' in params:
            query_params['tag'] = params['tag']
        if 'fromdate' in params:
            query_params['fromdate'] = params['fromdate']
        if 'todate' in params:
            query_params['todate'] = params['todate']

        header_params = {}
        if 'x_postmark_server_token' in params:
            header_params['X-Postmark-Server-Token'] = params['x_postmark_server_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/stats/outbound/spam', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2001',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_tracked_email_counts(self, x_postmark_server_token, **kwargs):
        """
        Get tracked email counts
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_tracked_email_counts(x_postmark_server_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str tag: Filter by tag
        :param date fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :param date todate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_tracked_email_counts_with_http_info(x_postmark_server_token, **kwargs)
        else:
            (data) = self.get_tracked_email_counts_with_http_info(x_postmark_server_token, **kwargs)
            return data

    def get_tracked_email_counts_with_http_info(self, x_postmark_server_token, **kwargs):
        """
        Get tracked email counts
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_tracked_email_counts_with_http_info(x_postmark_server_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str tag: Filter by tag
        :param date fromdate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :param date todate: Filter stats starting from the date specified. e.g. `2014-01-01`
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_postmark_server_token', 'tag', 'fromdate', 'todate']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tracked_email_counts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_postmark_server_token' is set
        if ('x_postmark_server_token' not in params) or (params['x_postmark_server_token'] is None):
            raise ValueError("Missing the required parameter `x_postmark_server_token` when calling `get_tracked_email_counts`")


        collection_formats = {}

        path_params = {}

        query_params = {}
        if 'tag' in params:
            query_params['tag'] = params['tag']
        if 'fromdate' in params:
            query_params['fromdate'] = params['fromdate']
        if 'todate' in params:
            query_params['todate'] = params['todate']

        header_params = {}
        if 'x_postmark_server_token' in params:
            header_params['X-Postmark-Server-Token'] = params['x_postmark_server_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/stats/outbound/tracked', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2002',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
