# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class TagTriggersAPIApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_tag_trigger(self, x_postmark_server_token, **kwargs):
        """
        Create a trigger for a tag
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_tag_trigger(x_postmark_server_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param EditTagTriggerRequest body:
        :return: InlineResponse2006Tags
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_tag_trigger_with_http_info(x_postmark_server_token, **kwargs)
        else:
            (data) = self.create_tag_trigger_with_http_info(x_postmark_server_token, **kwargs)
            return data

    def create_tag_trigger_with_http_info(self, x_postmark_server_token, **kwargs):
        """
        Create a trigger for a tag
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_tag_trigger_with_http_info(x_postmark_server_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param EditTagTriggerRequest body:
        :return: InlineResponse2006Tags
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_postmark_server_token', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_tag_trigger" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_postmark_server_token' is set
        if ('x_postmark_server_token' not in params) or (params['x_postmark_server_token'] is None):
            raise ValueError("Missing the required parameter `x_postmark_server_token` when calling `create_tag_trigger`")


        collection_formats = {}

        path_params = {}

        query_params = {}

        header_params = {}
        if 'x_postmark_server_token' in params:
            header_params['X-Postmark-Server-Token'] = params['x_postmark_server_token']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/triggers/tags', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2006Tags',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_tag_trigger(self, x_postmark_server_token, triggerid, **kwargs):
        """
        Delete a single trigger
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_tag_trigger(x_postmark_server_token, triggerid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param int triggerid: The ID for the Tag Trigger that should be deleted. (required)
        :return: StandardPostmarkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_tag_trigger_with_http_info(x_postmark_server_token, triggerid, **kwargs)
        else:
            (data) = self.delete_tag_trigger_with_http_info(x_postmark_server_token, triggerid, **kwargs)
            return data

    def delete_tag_trigger_with_http_info(self, x_postmark_server_token, triggerid, **kwargs):
        """
        Delete a single trigger
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_tag_trigger_with_http_info(x_postmark_server_token, triggerid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param int triggerid: The ID for the Tag Trigger that should be deleted. (required)
        :return: StandardPostmarkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_postmark_server_token', 'triggerid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_tag_trigger" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_postmark_server_token' is set
        if ('x_postmark_server_token' not in params) or (params['x_postmark_server_token'] is None):
            raise ValueError("Missing the required parameter `x_postmark_server_token` when calling `delete_tag_trigger`")
        # verify the required parameter 'triggerid' is set
        if ('triggerid' not in params) or (params['triggerid'] is None):
            raise ValueError("Missing the required parameter `triggerid` when calling `delete_tag_trigger`")


        collection_formats = {}

        path_params = {}
        if 'triggerid' in params:
            path_params['triggerid'] = params['triggerid']

        query_params = {}

        header_params = {}
        if 'x_postmark_server_token' in params:
            header_params['X-Postmark-Server-Token'] = params['x_postmark_server_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/triggers/tags/{triggerid}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StandardPostmarkResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def edit_tag_trigger(self, x_postmark_server_token, triggerid, **kwargs):
        """
        Edit a single trigger
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edit_tag_trigger(x_postmark_server_token, triggerid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param int triggerid: The ID of the Tag Trigger that should be modified by this request. (required)
        :param EditTagTriggerRequest body:
        :return: InlineResponse2006Tags
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.edit_tag_trigger_with_http_info(x_postmark_server_token, triggerid, **kwargs)
        else:
            (data) = self.edit_tag_trigger_with_http_info(x_postmark_server_token, triggerid, **kwargs)
            return data

    def edit_tag_trigger_with_http_info(self, x_postmark_server_token, triggerid, **kwargs):
        """
        Edit a single trigger
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.edit_tag_trigger_with_http_info(x_postmark_server_token, triggerid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param int triggerid: The ID of the Tag Trigger that should be modified by this request. (required)
        :param EditTagTriggerRequest body:
        :return: InlineResponse2006Tags
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_postmark_server_token', 'triggerid', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_tag_trigger" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_postmark_server_token' is set
        if ('x_postmark_server_token' not in params) or (params['x_postmark_server_token'] is None):
            raise ValueError("Missing the required parameter `x_postmark_server_token` when calling `edit_tag_trigger`")
        # verify the required parameter 'triggerid' is set
        if ('triggerid' not in params) or (params['triggerid'] is None):
            raise ValueError("Missing the required parameter `triggerid` when calling `edit_tag_trigger`")


        collection_formats = {}

        path_params = {}
        if 'triggerid' in params:
            path_params['triggerid'] = params['triggerid']

        query_params = {}

        header_params = {}
        if 'x_postmark_server_token' in params:
            header_params['X-Postmark-Server-Token'] = params['x_postmark_server_token']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/triggers/tags/{triggerid}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2006Tags',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_single_tag_trigger(self, x_postmark_server_token, triggerid, **kwargs):
        """
        Get a single trigger
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_single_tag_trigger(x_postmark_server_token, triggerid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param int triggerid: The ID for the Tag Trigger for which data should be retrieved. (required)
        :return: InlineResponse2006Tags
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_single_tag_trigger_with_http_info(x_postmark_server_token, triggerid, **kwargs)
        else:
            (data) = self.get_single_tag_trigger_with_http_info(x_postmark_server_token, triggerid, **kwargs)
            return data

    def get_single_tag_trigger_with_http_info(self, x_postmark_server_token, triggerid, **kwargs):
        """
        Get a single trigger
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_single_tag_trigger_with_http_info(x_postmark_server_token, triggerid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param int triggerid: The ID for the Tag Trigger for which data should be retrieved. (required)
        :return: InlineResponse2006Tags
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_postmark_server_token', 'triggerid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_single_tag_trigger" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_postmark_server_token' is set
        if ('x_postmark_server_token' not in params) or (params['x_postmark_server_token'] is None):
            raise ValueError("Missing the required parameter `x_postmark_server_token` when calling `get_single_tag_trigger`")
        # verify the required parameter 'triggerid' is set
        if ('triggerid' not in params) or (params['triggerid'] is None):
            raise ValueError("Missing the required parameter `triggerid` when calling `get_single_tag_trigger`")


        collection_formats = {}

        path_params = {}
        if 'triggerid' in params:
            path_params['triggerid'] = params['triggerid']

        query_params = {}

        header_params = {}
        if 'x_postmark_server_token' in params:
            header_params['X-Postmark-Server-Token'] = params['x_postmark_server_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/triggers/tags/{triggerid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2006Tags',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def searcg_tag_triggers(self, x_postmark_server_token, count, offset, **kwargs):
        """
        Search triggers
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.searcg_tag_triggers(x_postmark_server_token, count, offset, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param int count: Number of records to return per request. (required)
        :param int offset: Number of records to skip. (required)
        :param str match_name: Filter by delivery tag
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.searcg_tag_triggers_with_http_info(x_postmark_server_token, count, offset, **kwargs)
        else:
            (data) = self.searcg_tag_triggers_with_http_info(x_postmark_server_token, count, offset, **kwargs)
            return data

    def searcg_tag_triggers_with_http_info(self, x_postmark_server_token, count, offset, **kwargs):
        """
        Search triggers
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.searcg_tag_triggers_with_http_info(x_postmark_server_token, count, offset, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param int count: Number of records to return per request. (required)
        :param int offset: Number of records to skip. (required)
        :param str match_name: Filter by delivery tag
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_postmark_server_token', 'count', 'offset', 'match_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method searcg_tag_triggers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_postmark_server_token' is set
        if ('x_postmark_server_token' not in params) or (params['x_postmark_server_token'] is None):
            raise ValueError("Missing the required parameter `x_postmark_server_token` when calling `searcg_tag_triggers`")
        # verify the required parameter 'count' is set
        if ('count' not in params) or (params['count'] is None):
            raise ValueError("Missing the required parameter `count` when calling `searcg_tag_triggers`")
        # verify the required parameter 'offset' is set
        if ('offset' not in params) or (params['offset'] is None):
            raise ValueError("Missing the required parameter `offset` when calling `searcg_tag_triggers`")


        collection_formats = {}

        path_params = {}

        query_params = {}
        if 'count' in params:
            query_params['count'] = params['count']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'match_name' in params:
            query_params['match_name'] = params['match_name']

        header_params = {}
        if 'x_postmark_server_token' in params:
            header_params['X-Postmark-Server-Token'] = params['x_postmark_server_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/triggers/tags', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2006',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
