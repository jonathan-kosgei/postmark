# coding: utf-8

"""
    Postmark API

    Postmark makes sending and receiving email incredibly easy. 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class MessagesAPIApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def bypass_rules_for_inbound_message(self, x_postmark_server_token, messageid, **kwargs):
        """
        Bypass rules for a blocked inbound message
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.bypass_rules_for_inbound_message(x_postmark_server_token, messageid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str messageid: The ID of the message which should bypass inbound rules. (required)
        :return: StandardPostmarkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.bypass_rules_for_inbound_message_with_http_info(x_postmark_server_token, messageid, **kwargs)
        else:
            (data) = self.bypass_rules_for_inbound_message_with_http_info(x_postmark_server_token, messageid, **kwargs)
            return data

    def bypass_rules_for_inbound_message_with_http_info(self, x_postmark_server_token, messageid, **kwargs):
        """
        Bypass rules for a blocked inbound message
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.bypass_rules_for_inbound_message_with_http_info(x_postmark_server_token, messageid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str messageid: The ID of the message which should bypass inbound rules. (required)
        :return: StandardPostmarkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_postmark_server_token', 'messageid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bypass_rules_for_inbound_message" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_postmark_server_token' is set
        if ('x_postmark_server_token' not in params) or (params['x_postmark_server_token'] is None):
            raise ValueError("Missing the required parameter `x_postmark_server_token` when calling `bypass_rules_for_inbound_message`")
        # verify the required parameter 'messageid' is set
        if ('messageid' not in params) or (params['messageid'] is None):
            raise ValueError("Missing the required parameter `messageid` when calling `bypass_rules_for_inbound_message`")


        collection_formats = {}

        path_params = {}
        if 'messageid' in params:
            path_params['messageid'] = params['messageid']

        query_params = {}

        header_params = {}
        if 'x_postmark_server_token' in params:
            header_params['X-Postmark-Server-Token'] = params['x_postmark_server_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/messages/inbound/{messageid}/bypass', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StandardPostmarkResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_inbound_message_details(self, x_postmark_server_token, messageid, **kwargs):
        """
        Inbound message details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_inbound_message_details(x_postmark_server_token, messageid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str messageid: The ID of the message for which to details will be retrieved. (required)
        :return: InboundMessageFullDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_inbound_message_details_with_http_info(x_postmark_server_token, messageid, **kwargs)
        else:
            (data) = self.get_inbound_message_details_with_http_info(x_postmark_server_token, messageid, **kwargs)
            return data

    def get_inbound_message_details_with_http_info(self, x_postmark_server_token, messageid, **kwargs):
        """
        Inbound message details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_inbound_message_details_with_http_info(x_postmark_server_token, messageid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str messageid: The ID of the message for which to details will be retrieved. (required)
        :return: InboundMessageFullDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_postmark_server_token', 'messageid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_inbound_message_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_postmark_server_token' is set
        if ('x_postmark_server_token' not in params) or (params['x_postmark_server_token'] is None):
            raise ValueError("Missing the required parameter `x_postmark_server_token` when calling `get_inbound_message_details`")
        # verify the required parameter 'messageid' is set
        if ('messageid' not in params) or (params['messageid'] is None):
            raise ValueError("Missing the required parameter `messageid` when calling `get_inbound_message_details`")


        collection_formats = {}

        path_params = {}
        if 'messageid' in params:
            path_params['messageid'] = params['messageid']

        query_params = {}

        header_params = {}
        if 'x_postmark_server_token' in params:
            header_params['X-Postmark-Server-Token'] = params['x_postmark_server_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/messages/inbound/{messageid}/details', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InboundMessageFullDetailsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_opens_for_single_outbound_message(self, x_postmark_server_token, messageid, count, offset, **kwargs):
        """
        Retrieve Message Opens
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_opens_for_single_outbound_message(x_postmark_server_token, messageid, count, offset, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str messageid: The ID of the Outbound Message for which open statistics should be retrieved. (required)
        :param int count: Number of message opens to return per request. Max 500. (required)
        :param int offset: Number of messages to skip. (required)
        :return: MessageOpenSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_opens_for_single_outbound_message_with_http_info(x_postmark_server_token, messageid, count, offset, **kwargs)
        else:
            (data) = self.get_opens_for_single_outbound_message_with_http_info(x_postmark_server_token, messageid, count, offset, **kwargs)
            return data

    def get_opens_for_single_outbound_message_with_http_info(self, x_postmark_server_token, messageid, count, offset, **kwargs):
        """
        Retrieve Message Opens
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_opens_for_single_outbound_message_with_http_info(x_postmark_server_token, messageid, count, offset, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str messageid: The ID of the Outbound Message for which open statistics should be retrieved. (required)
        :param int count: Number of message opens to return per request. Max 500. (required)
        :param int offset: Number of messages to skip. (required)
        :return: MessageOpenSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_postmark_server_token', 'messageid', 'count', 'offset']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_opens_for_single_outbound_message" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_postmark_server_token' is set
        if ('x_postmark_server_token' not in params) or (params['x_postmark_server_token'] is None):
            raise ValueError("Missing the required parameter `x_postmark_server_token` when calling `get_opens_for_single_outbound_message`")
        # verify the required parameter 'messageid' is set
        if ('messageid' not in params) or (params['messageid'] is None):
            raise ValueError("Missing the required parameter `messageid` when calling `get_opens_for_single_outbound_message`")
        # verify the required parameter 'count' is set
        if ('count' not in params) or (params['count'] is None):
            raise ValueError("Missing the required parameter `count` when calling `get_opens_for_single_outbound_message`")
        # verify the required parameter 'offset' is set
        if ('offset' not in params) or (params['offset'] is None):
            raise ValueError("Missing the required parameter `offset` when calling `get_opens_for_single_outbound_message`")

        if 'count' in params and params['count'] > 500:
            raise ValueError("Invalid value for parameter `count` when calling `get_opens_for_single_outbound_message`, must be a value less than or equal to `500`")
        if 'count' in params and params['count'] < 1:
            raise ValueError("Invalid value for parameter `count` when calling `get_opens_for_single_outbound_message`, must be a value greater than or equal to `1`")
        if 'offset' in params and params['offset'] < 0:
            raise ValueError("Invalid value for parameter `offset` when calling `get_opens_for_single_outbound_message`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}
        if 'messageid' in params:
            path_params['messageid'] = params['messageid']

        query_params = {}
        if 'count' in params:
            query_params['count'] = params['count']
        if 'offset' in params:
            query_params['offset'] = params['offset']

        header_params = {}
        if 'x_postmark_server_token' in params:
            header_params['X-Postmark-Server-Token'] = params['x_postmark_server_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/messages/outbound/opens/{messageid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MessageOpenSearchResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_outbound_message_details(self, x_postmark_server_token, messageid, **kwargs):
        """
        Outbound message details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_outbound_message_details(x_postmark_server_token, messageid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str messageid: The ID of the message for which to retrieve details. (required)
        :return: OutboundMessageDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_outbound_message_details_with_http_info(x_postmark_server_token, messageid, **kwargs)
        else:
            (data) = self.get_outbound_message_details_with_http_info(x_postmark_server_token, messageid, **kwargs)
            return data

    def get_outbound_message_details_with_http_info(self, x_postmark_server_token, messageid, **kwargs):
        """
        Outbound message details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_outbound_message_details_with_http_info(x_postmark_server_token, messageid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str messageid: The ID of the message for which to retrieve details. (required)
        :return: OutboundMessageDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_postmark_server_token', 'messageid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_outbound_message_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_postmark_server_token' is set
        if ('x_postmark_server_token' not in params) or (params['x_postmark_server_token'] is None):
            raise ValueError("Missing the required parameter `x_postmark_server_token` when calling `get_outbound_message_details`")
        # verify the required parameter 'messageid' is set
        if ('messageid' not in params) or (params['messageid'] is None):
            raise ValueError("Missing the required parameter `messageid` when calling `get_outbound_message_details`")


        collection_formats = {}

        path_params = {}
        if 'messageid' in params:
            path_params['messageid'] = params['messageid']

        query_params = {}

        header_params = {}
        if 'x_postmark_server_token' in params:
            header_params['X-Postmark-Server-Token'] = params['x_postmark_server_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/messages/outbound/{messageid}/details', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='OutboundMessageDetailsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_outbound_message_dump(self, x_postmark_server_token, messageid, **kwargs):
        """
        Outbound message dump
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_outbound_message_dump(x_postmark_server_token, messageid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str messageid: The ID of the message for which to retrieve a dump. (required)
        :return: OutboundMessageDumpResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_outbound_message_dump_with_http_info(x_postmark_server_token, messageid, **kwargs)
        else:
            (data) = self.get_outbound_message_dump_with_http_info(x_postmark_server_token, messageid, **kwargs)
            return data

    def get_outbound_message_dump_with_http_info(self, x_postmark_server_token, messageid, **kwargs):
        """
        Outbound message dump
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_outbound_message_dump_with_http_info(x_postmark_server_token, messageid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str messageid: The ID of the message for which to retrieve a dump. (required)
        :return: OutboundMessageDumpResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_postmark_server_token', 'messageid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_outbound_message_dump" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_postmark_server_token' is set
        if ('x_postmark_server_token' not in params) or (params['x_postmark_server_token'] is None):
            raise ValueError("Missing the required parameter `x_postmark_server_token` when calling `get_outbound_message_dump`")
        # verify the required parameter 'messageid' is set
        if ('messageid' not in params) or (params['messageid'] is None):
            raise ValueError("Missing the required parameter `messageid` when calling `get_outbound_message_dump`")


        collection_formats = {}

        path_params = {}
        if 'messageid' in params:
            path_params['messageid'] = params['messageid']

        query_params = {}

        header_params = {}
        if 'x_postmark_server_token' in params:
            header_params['X-Postmark-Server-Token'] = params['x_postmark_server_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/messages/outbound/{messageid}/dump', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='OutboundMessageDumpResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def retry_inbound_message_processing(self, x_postmark_server_token, messageid, **kwargs):
        """
        Retry a failed inbound message for processing
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.retry_inbound_message_processing(x_postmark_server_token, messageid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str messageid: The ID of the inbound message on which we should retry processing. (required)
        :return: StandardPostmarkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.retry_inbound_message_processing_with_http_info(x_postmark_server_token, messageid, **kwargs)
        else:
            (data) = self.retry_inbound_message_processing_with_http_info(x_postmark_server_token, messageid, **kwargs)
            return data

    def retry_inbound_message_processing_with_http_info(self, x_postmark_server_token, messageid, **kwargs):
        """
        Retry a failed inbound message for processing
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.retry_inbound_message_processing_with_http_info(x_postmark_server_token, messageid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param str messageid: The ID of the inbound message on which we should retry processing. (required)
        :return: StandardPostmarkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_postmark_server_token', 'messageid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retry_inbound_message_processing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_postmark_server_token' is set
        if ('x_postmark_server_token' not in params) or (params['x_postmark_server_token'] is None):
            raise ValueError("Missing the required parameter `x_postmark_server_token` when calling `retry_inbound_message_processing`")
        # verify the required parameter 'messageid' is set
        if ('messageid' not in params) or (params['messageid'] is None):
            raise ValueError("Missing the required parameter `messageid` when calling `retry_inbound_message_processing`")


        collection_formats = {}

        path_params = {}
        if 'messageid' in params:
            path_params['messageid'] = params['messageid']

        query_params = {}

        header_params = {}
        if 'x_postmark_server_token' in params:
            header_params['X-Postmark-Server-Token'] = params['x_postmark_server_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/messages/inbound/{messageid}/retry', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StandardPostmarkResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def search_inbound_messages(self, x_postmark_server_token, count, offset, **kwargs):
        """
        Inbound message search
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_inbound_messages(x_postmark_server_token, count, offset, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param int count: Number of messages to return per request. Max 500. (required)
        :param int offset: Number of messages to skip (required)
        :param str recipient: Filter by the user who was receiving the email
        :param str fromemail: Filter by the sender email address
        :param str subject: Filter by email subject
        :param str mailboxhash: Filter by mailboxhash
        :param str tag: Filter by tag
        :param str status: Filter by status (`blocked`, `processed`, `queued`, `failed`, `scheduled`)
        :param date todate: Filter messages up to the date specified. e.g. `2014-02-01`
        :param date fromdate: Filter messages starting from the date specified. e.g. `2014-02-01`
        :return: InboundSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.search_inbound_messages_with_http_info(x_postmark_server_token, count, offset, **kwargs)
        else:
            (data) = self.search_inbound_messages_with_http_info(x_postmark_server_token, count, offset, **kwargs)
            return data

    def search_inbound_messages_with_http_info(self, x_postmark_server_token, count, offset, **kwargs):
        """
        Inbound message search
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_inbound_messages_with_http_info(x_postmark_server_token, count, offset, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param int count: Number of messages to return per request. Max 500. (required)
        :param int offset: Number of messages to skip (required)
        :param str recipient: Filter by the user who was receiving the email
        :param str fromemail: Filter by the sender email address
        :param str subject: Filter by email subject
        :param str mailboxhash: Filter by mailboxhash
        :param str tag: Filter by tag
        :param str status: Filter by status (`blocked`, `processed`, `queued`, `failed`, `scheduled`)
        :param date todate: Filter messages up to the date specified. e.g. `2014-02-01`
        :param date fromdate: Filter messages starting from the date specified. e.g. `2014-02-01`
        :return: InboundSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_postmark_server_token', 'count', 'offset', 'recipient', 'fromemail', 'subject', 'mailboxhash', 'tag', 'status', 'todate', 'fromdate']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_inbound_messages" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_postmark_server_token' is set
        if ('x_postmark_server_token' not in params) or (params['x_postmark_server_token'] is None):
            raise ValueError("Missing the required parameter `x_postmark_server_token` when calling `search_inbound_messages`")
        # verify the required parameter 'count' is set
        if ('count' not in params) or (params['count'] is None):
            raise ValueError("Missing the required parameter `count` when calling `search_inbound_messages`")
        # verify the required parameter 'offset' is set
        if ('offset' not in params) or (params['offset'] is None):
            raise ValueError("Missing the required parameter `offset` when calling `search_inbound_messages`")


        collection_formats = {}

        path_params = {}

        query_params = {}
        if 'count' in params:
            query_params['count'] = params['count']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'recipient' in params:
            query_params['recipient'] = params['recipient']
        if 'fromemail' in params:
            query_params['fromemail'] = params['fromemail']
        if 'subject' in params:
            query_params['subject'] = params['subject']
        if 'mailboxhash' in params:
            query_params['mailboxhash'] = params['mailboxhash']
        if 'tag' in params:
            query_params['tag'] = params['tag']
        if 'status' in params:
            query_params['status'] = params['status']
        if 'todate' in params:
            query_params['todate'] = params['todate']
        if 'fromdate' in params:
            query_params['fromdate'] = params['fromdate']

        header_params = {}
        if 'x_postmark_server_token' in params:
            header_params['X-Postmark-Server-Token'] = params['x_postmark_server_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/messages/inbound', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InboundSearchResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def search_opens_for_outbound_messages(self, x_postmark_server_token, count, offset, **kwargs):
        """
        Opens for a single message
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_opens_for_outbound_messages(x_postmark_server_token, count, offset, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param int count: Number of message opens to return per request. Max 500. (required)
        :param int offset: Number of messages to skip (required)
        :param str recipient: Filter by To, Cc, Bcc
        :param str tag: Filter by tag
        :param str client_name: Filter by client name, i.e. Outlook, Gmail
        :param str client_company: Filter by company, i.e. Microsoft, Apple, Google
        :param str client_family: Filter by client family, i.e. OS X, Chrome
        :param str os_name: Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7
        :param str os_family: Filter by kind of OS used without specific version, i.e. OS X, Windows
        :param str os_company: Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation
        :param str platform: Filter by platform, i.e. webmail, desktop, mobile
        :param str country: Filter by country messages were opened in, i.e. Denmark, Russia
        :param str region: Filter by full name of region messages were opened in, i.e. Moscow, New York
        :param str city: Filter by full name of region messages were opened in, i.e. Moscow, New York
        :return: MessageOpenSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.search_opens_for_outbound_messages_with_http_info(x_postmark_server_token, count, offset, **kwargs)
        else:
            (data) = self.search_opens_for_outbound_messages_with_http_info(x_postmark_server_token, count, offset, **kwargs)
            return data

    def search_opens_for_outbound_messages_with_http_info(self, x_postmark_server_token, count, offset, **kwargs):
        """
        Opens for a single message
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_opens_for_outbound_messages_with_http_info(x_postmark_server_token, count, offset, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param int count: Number of message opens to return per request. Max 500. (required)
        :param int offset: Number of messages to skip (required)
        :param str recipient: Filter by To, Cc, Bcc
        :param str tag: Filter by tag
        :param str client_name: Filter by client name, i.e. Outlook, Gmail
        :param str client_company: Filter by company, i.e. Microsoft, Apple, Google
        :param str client_family: Filter by client family, i.e. OS X, Chrome
        :param str os_name: Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7
        :param str os_family: Filter by kind of OS used without specific version, i.e. OS X, Windows
        :param str os_company: Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation
        :param str platform: Filter by platform, i.e. webmail, desktop, mobile
        :param str country: Filter by country messages were opened in, i.e. Denmark, Russia
        :param str region: Filter by full name of region messages were opened in, i.e. Moscow, New York
        :param str city: Filter by full name of region messages were opened in, i.e. Moscow, New York
        :return: MessageOpenSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_postmark_server_token', 'count', 'offset', 'recipient', 'tag', 'client_name', 'client_company', 'client_family', 'os_name', 'os_family', 'os_company', 'platform', 'country', 'region', 'city']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_opens_for_outbound_messages" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_postmark_server_token' is set
        if ('x_postmark_server_token' not in params) or (params['x_postmark_server_token'] is None):
            raise ValueError("Missing the required parameter `x_postmark_server_token` when calling `search_opens_for_outbound_messages`")
        # verify the required parameter 'count' is set
        if ('count' not in params) or (params['count'] is None):
            raise ValueError("Missing the required parameter `count` when calling `search_opens_for_outbound_messages`")
        # verify the required parameter 'offset' is set
        if ('offset' not in params) or (params['offset'] is None):
            raise ValueError("Missing the required parameter `offset` when calling `search_opens_for_outbound_messages`")


        collection_formats = {}

        path_params = {}

        query_params = {}
        if 'count' in params:
            query_params['count'] = params['count']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'recipient' in params:
            query_params['recipient'] = params['recipient']
        if 'tag' in params:
            query_params['tag'] = params['tag']
        if 'client_name' in params:
            query_params['client_name'] = params['client_name']
        if 'client_company' in params:
            query_params['client_company'] = params['client_company']
        if 'client_family' in params:
            query_params['client_family'] = params['client_family']
        if 'os_name' in params:
            query_params['os_name'] = params['os_name']
        if 'os_family' in params:
            query_params['os_family'] = params['os_family']
        if 'os_company' in params:
            query_params['os_company'] = params['os_company']
        if 'platform' in params:
            query_params['platform'] = params['platform']
        if 'country' in params:
            query_params['country'] = params['country']
        if 'region' in params:
            query_params['region'] = params['region']
        if 'city' in params:
            query_params['city'] = params['city']

        header_params = {}
        if 'x_postmark_server_token' in params:
            header_params['X-Postmark-Server-Token'] = params['x_postmark_server_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/messages/outbound/opens', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MessageOpenSearchResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def search_outbound_messages(self, x_postmark_server_token, count, offset, **kwargs):
        """
        Outbound message search
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_outbound_messages(x_postmark_server_token, count, offset, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param int count: Number of messages to return per request. Max 500. (required)
        :param int offset: Number of messages to skip (required)
        :param str recipient: Filter by the user who was receiving the email
        :param str fromemail: Filter by the sender email address
        :param str tag: Filter by tag
        :param str status: Filter by status (`queued` or `sent`)
        :param date todate: Filter messages up to the date specified. e.g. `2014-02-01`
        :param date fromdate: Filter messages starting from the date specified. e.g. `2014-02-01`
        :return: OutboundSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.search_outbound_messages_with_http_info(x_postmark_server_token, count, offset, **kwargs)
        else:
            (data) = self.search_outbound_messages_with_http_info(x_postmark_server_token, count, offset, **kwargs)
            return data

    def search_outbound_messages_with_http_info(self, x_postmark_server_token, count, offset, **kwargs):
        """
        Outbound message search
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_outbound_messages_with_http_info(x_postmark_server_token, count, offset, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_postmark_server_token: The token associated with the Server on which this request will operate. (required)
        :param int count: Number of messages to return per request. Max 500. (required)
        :param int offset: Number of messages to skip (required)
        :param str recipient: Filter by the user who was receiving the email
        :param str fromemail: Filter by the sender email address
        :param str tag: Filter by tag
        :param str status: Filter by status (`queued` or `sent`)
        :param date todate: Filter messages up to the date specified. e.g. `2014-02-01`
        :param date fromdate: Filter messages starting from the date specified. e.g. `2014-02-01`
        :return: OutboundSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_postmark_server_token', 'count', 'offset', 'recipient', 'fromemail', 'tag', 'status', 'todate', 'fromdate']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_outbound_messages" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_postmark_server_token' is set
        if ('x_postmark_server_token' not in params) or (params['x_postmark_server_token'] is None):
            raise ValueError("Missing the required parameter `x_postmark_server_token` when calling `search_outbound_messages`")
        # verify the required parameter 'count' is set
        if ('count' not in params) or (params['count'] is None):
            raise ValueError("Missing the required parameter `count` when calling `search_outbound_messages`")
        # verify the required parameter 'offset' is set
        if ('offset' not in params) or (params['offset'] is None):
            raise ValueError("Missing the required parameter `offset` when calling `search_outbound_messages`")


        collection_formats = {}

        path_params = {}

        query_params = {}
        if 'count' in params:
            query_params['count'] = params['count']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'recipient' in params:
            query_params['recipient'] = params['recipient']
        if 'fromemail' in params:
            query_params['fromemail'] = params['fromemail']
        if 'tag' in params:
            query_params['tag'] = params['tag']
        if 'status' in params:
            query_params['status'] = params['status']
        if 'todate' in params:
            query_params['todate'] = params['todate']
        if 'fromdate' in params:
            query_params['fromdate'] = params['fromdate']

        header_params = {}
        if 'x_postmark_server_token' in params:
            header_params['X-Postmark-Server-Token'] = params['x_postmark_server_token']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/messages/outbound', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='OutboundSearchResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
